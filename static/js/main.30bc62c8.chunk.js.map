{"version":3,"sources":["Components/UserInput/UserInput.js","Components/Modal/Modal.js","Components/Scorebar/Scorebar.js","Components/Turn/Turn.js","Components/TurnsList/TurnsList.js","Components/Message/Message.js","Utils/database.js","Utils/Computer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["UserInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFormSubmit","event","preventDefault","onSubmit","state","guess","handleChange","e","setState","target","value","inputRef","React","createRef","buttonRef","prevProps","player","gameEnded","current","disabled","focus","firstLetter","console","log","blur","react_default","a","createElement","className","type","ref","onChange","Component","Modal","isNewRecord","handleClick","bind","assertThisInitialized","defineRecord","onButtonClick","recordPart","pointsPart","defineWordEnding","score","human","title","description","Fragment","buttonText","matchScore","bestScore","Infinity","localStorage","getItem","Number","setItem","num","gameStarted","concat","getContent","onClick","Scorebar","turn","Math","floor","computer","timeLeft","calcUserTurn","Turn","loading","city","react_spinners","margin","sizeUnit","size","color","country","prop","turnScore","renderTurnNumber","turnNumber","renderCity","renderCountry","renderBonus","renderScore","TurnsList","listRef","list","scrollTop","scrollHeight","turns","playedCities","map","cityObj","Components_Turn_Turn","key","currentTurn","activePlayer","blank","push","renderTurns","acceptedMessages","Message","timer","isShown","msgRef","message","id","classList","remove","runTimer","setTimeout","add","clearInterval","msg","isAccepted","random","length","code","lastLetters","renderMsg","citiesData","require","initialDataPrepare","data","cities","bigCities","helper","arr","toUpperCase","forEach","interest","citiesRU","LETTERS","toConsumableArray","keys","FORBIDDEN_LETTERS","Computer","lang","alreadyPlayed","Set","recentTurn","lastLetter","index","randomLetter","getRandomIndex","answer","defineLastLetter","deleteCity","checkMatch","dataOnLetter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","toLowerCase","err","return","cityData","filter","indexOf","comp","gameConfig","turnLimit","cityValue","0","1","2","App","cityOptions","formatGuess","validateFirstLetter","option","has","checkUserInput","makeTurn","_callee","regenerator_default","wrap","_context","prev","stop","Promise","resolve","reject","incrementScore","updateGameState","_this2","nextPlayer","markCityAsPlayed","setInterval","options","trim","slice","replace","test","copy","cityWithDashes","cityWithNoSpaces","played","citySize","_objectSpread","NaN","Components_Modal_Modal","Components_Scorebar_Scorebar","Components_TurnsList_TurnsList","Components_Message_Message","Components_UserInput_UserInput","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","Components_App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.30bc62c8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './UserInput.css';\n\nclass UserInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { guess: '' };\n    this.inputRef = React.createRef();\n    this.buttonRef = React.createRef();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (this.props.player === 'human' && !this.props.gameEnded) {\n      if (prevProps.player !== this.props.player) {\n        this.inputRef.current.disabled = false;\n        this.buttonRef.current.disabled = false;\n        if (!this.props.gameEnded) this.inputRef.current.focus();\n        this.setState({ guess: this.props.firstLetter });\n      }\n    } else {\n      this.inputRef.current.disabled = true;\n      this.buttonRef.current.disabled = true;\n    }\n    \n    if (prevProps.gameEnded !== this.props.gameEnded && this.props.gameEnded) {\n      console.log('here');\n      this.inputRef.current.blur();\n      this.setState({ guess: '' });\n      this.inputRef.current.disabled = true;\n      this.buttonRef.current.disabled = true;\n    }    \n  }\n  \n  onFormSubmit = (event) => {\n    event.preventDefault();\n    this.props.onSubmit(this.state.guess);\n  }\n  \n  handleChange = (e) => {\n    this.setState({ guess: e.target.value });\n  }\n  \n  render() {\n    return (\n      <div className=\"guess\">\n        <form className=\"guess__form\" onSubmit={this.onFormSubmit}>\n          <input className=\"guess__input\" type=\"text\" ref={this.inputRef} value={this.state.guess} \n          onChange={this.handleChange} />\n          <button className=\"guess__button\" type=\"submit\" ref={this.buttonRef}></button>\n          \n        </form>\n      </div>\n    );\n  }\n}\n\nexport default UserInput;","import React, { Component } from 'react';\nimport './Modal.css';\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isNewRecord: false };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.gameEnded !== this.props.gameEnded && this.props.gameEnded) {\n      if (this.defineRecord()) this.setState({ isNewRecord: true });\n    }\n  }\n\n  handleClick() {\n    this.props.onButtonClick();\n    this.setState({ isNewRecord: false });\n  }\n  \n  getContent() {\n    if (this.props.gameEnded) {\n      let recordPart = this.state.isNewRecord ? 'Это, на секундочку, новый рекорд!' : '';\n      let pointsPart = this.defineWordEnding(this.props.score.human);\n\n      return {\n        title: 'Все, приехали!',\n        description: <React.Fragment>Я насчитал <strong>{this.props.score.human}</strong> балл{pointsPart}. {recordPart}<br/>\n        Желтая кнопка ниже приглашает повторить.</React.Fragment>,\n        buttonText: 'Еще разок.'\n      }\n    }\n    \n    return {\n      title: 'Новая игра',\n      description: <React.Fragment>Правила очень простые — называй реально существующие города на последнюю букву города, который сыграл компьютер. <br /><br />\n      <strong>Например</strong>: Москва 👉 Амстердам 👉 Мюнхен <br /><br /> P.S. Кстати, у компьютера выиграть невозможно, поэтому не расстраивайся.</React.Fragment>,\n      buttonText: 'Понятно.'\n    }\n  }\n  \n  defineRecord() {\n    const matchScore = this.props.score.human;\n    let bestScore = -Infinity;\n    \n    if (!localStorage.getItem('bestScore')) {\n      localStorage.setItem('bestScore', matchScore);\n    } else {\n      bestScore = Number(localStorage.getItem('bestScore'));\n      \n      if (matchScore > bestScore) localStorage.setItem('bestScore', matchScore);\n    }\n    return matchScore > bestScore;\n  }\n  \n  defineWordEnding(num) {\n    if (num % 100 >= 11 && num % 100 <= 19) return 'ов';\n    if (num % 10 === 1) return '';\n    if (num % 10 >= 2 && num % 10 <= 4) return 'а';\n    return 'ов';\n  }\n  \n  render() {\n    const gameStarted = !this.props.gameStarted || this.props.gameEnded ? \"modal_show\" : \"\";\n    \n    return (\n      <div className={`modal ${gameStarted}`}>\n        <div className=\"modal-content\">\n          <h2 className=\"modal__title\">{this.getContent().title}</h2>\n          <p className=\"modal__description\">{this.getContent().description}</p>\n          <button className=\"modal__button\" type=\"button\" onClick={this.handleClick}>{this.getContent().buttonText}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport './Scorebar.css';\n\nclass Scorebar extends Component {  \n  \n  calcUserTurn() {\n    if (this.props.turn <= 1) return 0;\n    return Math.floor((this.props.turn) / 2);\n  }\n  \n  render() {\n    return (\n      <div className=\"scorebar-wrapper\">\n        <div className=\"scorebar\">\n          <div className=\"scorebar__item scorebar__item--score\">\n            <span className=\"scorebar__value scorebar__value--score scorebar__value--human\">{this.props.score.human}</span>\n            <span className=\"scorebar__value scorebar__value--score scorebar__value--computer\">{this.props.score.computer}</span>\n          </div>\n          <div className=\"scorebar__item\">\n            <span className=\"scorebar__value\">{this.props.timeLeft}</span>\n            <span className=\"scorebar__caption\">Время на ход</span>\n          </div>\n          <div className=\"scorebar__item\">\n            <span className=\"scorebar__value\">{this.calcUserTurn()}</span>\n            <span className=\"scorebar__caption\">Номер рейса</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Scorebar;","import React, { Component } from 'react';\n// import { css } from '@emotion/core';\nimport { PulseLoader } from 'react-spinners';\nimport './Turn.css';\n\nclass Turn extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    }\n  }\n  \n  renderCity() {\n    if (!this.props.city) {\n      return (\n        <div className=\"turns__spinner-wrapper\">\n          { this.props.firstLetter ? <span className=\"turns__first-letter\">{this.props.firstLetter}</span> : '' }\n          <span className=\"turns__spinner\">\n            <PulseLoader\n            margin={\"3px\"}\n            sizeUnit={\"4px\"}\n            size={0}\n            color={'#FD8A2E'}\n            loading={this.state.loading}\n            />\n          </span>\n        </div>\n      )\n    } else {\n      return this.props.city;\n    }\n  }\n  \n  renderCountry() {\n    if (this.props.city) {\n      return this.props.country;\n    }\n  }\n  \n  renderTurnNumber(prop) {\n    if (prop <= 1) {\n      return 1;\n    } else {\n      return prop;\n    }\n  }\n  \n  renderBonus() {\n    switch(this.props.size) {\n      case 0: \n        return '· Столица (+2)';\n      case 2:\n        return '· Мегаполис (+1)';\n      default: \n        return '';\n    }\n  }\n  \n  renderScore() {\n    if (this.props.turnScore) {\n      return (\n        <div className=\"turns__score\">\n          {this.props.turnScore}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <li className=\"turns__item\">\n        <div className=\"turns__wrapper\">\n          <span className=\"turns__number\">\n            {this.renderTurnNumber(this.props.turnNumber)}\n          </span>\n          <span className=\"turns__city\">\n            {this.renderCity()}\n          </span>\n          <span className=\"turns__country\">\n            {this.renderCountry()}\n          </span>\n          <span className=\"turns__bonus\">\n            {this.renderBonus()}\n          </span>\n        </div>\n        <div className={ `turns__player turns__player--${this.props.player}` }>\n        </div>\n        {this.renderScore()}\n        \n      </li>\n    )\n  }\n}\n\nexport default Turn;","import React, { Component } from 'react';\nimport Turn from '../Turn/Turn';\nimport './TurnsList.css';\n\nclass TurnsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    };\n    this.listRef = React.createRef();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.turnNumber !== this.props.turnNumber) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight;\n    }\n  }\n  \n  renderTurns() {  \n    const turns = this.props.playedCities.map(cityObj => {\n      return <Turn key={cityObj.turnNumber} turnNumber={cityObj.turnNumber} turnScore={cityObj.turnScore} city={cityObj.city} size={cityObj.size} country={cityObj.country} player={cityObj.player} />;\n    });\n    \n    if (!this.props.gameEnded) {\n      let currentTurn = <Turn key={this.props.turnNumber + 1} turnNumber={this.props.turnNumber} firstLetter={this.props.turn.firstLetter} player={this.props.turn.activePlayer} blank={true} />\n      turns.push(currentTurn);\n    }\n    \n    return turns;\n  }\n  \n  render() {\n    return (\n      <ul ref={this.listRef} className=\"turns\">\n        {this.renderTurns()}\n        \n      </ul>\n    );\n  }\n}\n\nexport default TurnsList;","import React, { Component } from 'react';\nimport './Message.css';\n\nconst acceptedMessages = [\n  'Океюшки!',\n  'Красивая у них площадь в центре!',\n  'Очень хорошо!',\n  'Компьютера не обыграешь!',\n  'Кофе у них так себе.',\n  'Вот бы туда сгонять на выходные!'\n]\n\nclass Message extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { timer: null, isShown: false };\n    this.msgRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.message.id !== this.props.message.id) {\n      this.setState({ isShown: true });\n      this.msgRef.current.classList.remove('visually-hidden');\n      this.runTimer(this.props.message.id);\n    }\n  }\n  \n  runTimer(id) {\n    this.timer = setTimeout(function() {\n      this.setState({ isShown: false });\n      this.msgRef.current.classList.add('visually-hidden');\n      if (id !== this.props.message.id) {\n        clearInterval(this.timer);\n        this.setState({ isShown: true });\n        this.msgRef.current.classList.remove('visually-hidden');\n      }\n    }.bind(this), 5000);\n  }\n  \n  renderMsg() {\n    if (this.props.gameEnded) return;\n    let msg, messageElement;\n    \n    if (this.props.isAccepted) {\n      let displayChance = Math.random() * 100;\n      \n      if (displayChance > 66) {\n        msg = acceptedMessages[Math.floor(Math.random() * acceptedMessages.length)];\n        return <p className=\"guess__message\">{msg}</p>;\n      }\n    }\n    \n    if (this.props.message.code) {\n      switch(this.props.message.code) {\n        case 1:\n          msg = <React.Fragment>\n            Город <span className=\"guess__accent\">{this.props.message.value}</span> уже был сыгран в этом матче.\n          </React.Fragment>\n          break;\n        case 2:\n          msg = <React.Fragment>\n            Не знаю города <span className=\"guess__accent\">{this.props.message.value}</span>\n          </React.Fragment>\n          break;\n        case 3:\n          let lastLetters = [];\n          if (this.props.message.value === 'И' || this.props.message.value === 'Й') {\n            lastLetters = ['И', 'Й'];\n          }\n          if (this.props.message.value === 'Ш' || this.props.message.value === 'Щ') {\n            lastLetters = ['Ш', 'Щ'];\n          }\n          \n          if (!lastLetters.length) {\n            msg = <React.Fragment>\n              Нужно сыграть город на <span className=\"guess__accent\">{this.props.message.value}</span>\n            </React.Fragment>\n          } else {\n            \n            msg = <React.Fragment>\n              Нужно сыграть город на <span className=\"guess__accent\">{lastLetters[0]}</span> или <span className=\"guess__accent\">{lastLetters[1]}</span>\n            </React.Fragment>\n          }\n          break;\n        default:\n          msg = \"\";\n      }\n      \n      messageElement = <p className=\"guess__message\">{msg}</p>;\n      return messageElement;\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"guess__msg-wrapper\" ref={this.msgRef}>\n        {this.renderMsg()}\n      </div>\n    );\n  }\n}\n\nexport default Message;","export const citiesData = require('./cities-ru.json');\n\nexport function initialDataPrepare(data) {\n  const cities = [];\n  const bigCities = [];\n  \n  function helper(arr, cityObj) {\n    const firstLetter = cityObj.city[0].toUpperCase();      \n    if (!arr[firstLetter]) {\n      arr[firstLetter] = [];\n      arr[firstLetter].push(cityObj);\n    } else {\n      arr[firstLetter].push(cityObj);\n    }\n  }\n  \n  data.forEach(city => {\n    if (city.size !== 1 || city.interest) {\n      helper(bigCities, city);\n    } else {\n      helper(cities, city);\n    }\n  })\n  return { bigCities, cities };\n}","import { citiesData, initialDataPrepare} from './database';\n\nconst citiesRU = initialDataPrepare(citiesData);\n// size: 0 — Capital\n// size: 1 - Small or medium city\n// size: 2 — Big city (> 1m population)\nconst LETTERS = [...Object.keys(citiesRU.bigCities)];\nconst FORBIDDEN_LETTERS = ['ь', 'ъ', 'ы', 'ф'];\n\nclass Computer {\n  constructor(lang) {\n    this.data = initialDataPrepare(citiesData);\n    this.alreadyPlayed = new Set();\n    this.recentTurn = {\n      city: {},\n      lastLetter: ''\n    }\n  }\n  \n  answer(firstLetter) {\n    const bigCities = this.data.bigCities;\n    const cities = this.data.cities;\n    let data = [];\n    let index = null;\n    \n    if (!firstLetter) {\n      let randomLetter = LETTERS[this.getRandomIndex(LETTERS)];\n      // Check if cities are still available on random letter\n      while (!cities[randomLetter].length || !bigCities[randomLetter].length) {\n        randomLetter = LETTERS[this.getRandomIndex(LETTERS)];\n      }\n      firstLetter = randomLetter;\n    }\n    \n    if (bigCities[firstLetter].length) {\n      index = this.getRandomIndex(bigCities[firstLetter]);\n      data = bigCities[firstLetter];\n    } else if (cities[firstLetter].length) {\n      index = this.getRandomIndex(cities[firstLetter]);\n      data = cities[firstLetter];\n    } else {\n      return false;\n    }\n    \n    const answer = data[index];\n    this.recentTurn.city = answer;\n    this.defineLastLetter(answer.city);\n    this.deleteCity(answer);\n    return answer;\n  }\n  \n  checkUserInput(guess) {\n    const firstLetter = guess[0].toUpperCase();\n    \n    if (this.checkMatch(this.data.bigCities[firstLetter], guess)) return true;\n    if (this.checkMatch(this.data.cities[firstLetter], guess)) return true;\n    return false;\n    \n    // for (let cityObj of this.data.bigCities[firstLetter]) {\n    //   if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n    //     this.recentTurn = {\n    //       city: cityObj,\n    //       lastLetter: this.defineLastLetter(cityObj.city)\n    //     }\n    //     this.deleteCity(cityObj);\n    //     return true;\n    //   }\n    // }\n    // \n    // for (let cityObj of this.data.cities[firstLetter]) {\n    //   if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n    //     this.recentTurn = {\n    //       city: cityObj,\n    //       lastLetter: this.defineLastLetter(cityObj.city)\n    //     }\n    //     this.deleteCity(cityObj);\n    //     return true;\n    //   }\n    // }\n  }\n  \n  checkMatch(dataOnLetter, guess) {\n    for (let cityObj of dataOnLetter) {\n      if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n        this.recentTurn = {\n          city: cityObj,\n          lastLetter: this.defineLastLetter(cityObj.city)\n        }\n        this.deleteCity(cityObj);\n        return true;\n      }\n    }\n  }\n  \n  deleteCity(cityData) {\n    const city = cityData.city;\n    this.alreadyPlayed.add(city);\n    const firstLetter = city[0].toUpperCase();\n    \n    if (cityData.size === 1 && !cityData.interest.length) {\n      const cities = this.data.cities[firstLetter].filter(cityObj => {\n        return cityObj.city !== city;\n      });\n      this.data.cities[firstLetter] = cities;\n    } else {\n      const bigCities = this.data.bigCities[firstLetter].filter(cityObj => {\n        return cityObj.city !== city;\n      });\n      this.data.bigCities[firstLetter] = bigCities;\n    }\n  }\n  \n  defineLastLetter(city) {\n    let index = city.length - 1;\n    let lastLetter = city[index];\n    \n    while (FORBIDDEN_LETTERS.indexOf(lastLetter) !== -1) {\n      index--;\n      lastLetter = city[index];\n    }\n    this.recentTurn.lastLetter = lastLetter.toUpperCase();\n    return lastLetter.toUpperCase();\n  }\n  \n  getRandomIndex(arr) {\n    return Math.floor(Math.random() * (arr.length - 1));\n  }  \n}\n\nexport default Computer;","import React, { Component } from 'react';\nimport UserInput from '../UserInput/UserInput';\nimport Modal from '../Modal/Modal';\nimport Scorebar from '../Scorebar/Scorebar';\nimport TurnsList from '../TurnsList/TurnsList';\nimport Message from '../Message/Message';\nimport Computer from '../../Utils/Computer';\nimport './App.css';\n\nlet comp = new Computer('ru');\nconst gameConfig = {\n  turnLimit: 60,\n  cityValue: {'0': 3, '1': 1, '2': 2}\n}\n\nclass App extends Component {\n  state = {\n    gameStarted: false,\n    gameEnded: false,\n    turn: {\n      activePlayer: 'computer',\n      firstLetter: ''\n    },\n    playedCities: [],\n    turnNumber: 0,\n    timeLeft: gameConfig.turnLimit,\n    score: {\n      human: 0,\n      computer: 0\n    },\n    turnScore: null,\n    timer: null,\n    message: {\n      code: 0,\n      value: null,\n      id: 0\n    },\n    isAccepted: false\n  }\n\n  async makeTurn(player) {\n    if (player === 'computer') {\n      await this.setState({ turnNumber: this.state.turnNumber + 1 });\n      const answer = comp.answer(this.state.turn.firstLetter);\n      await new Promise((resolve, reject) => {\n        resolve(\n          setTimeout(function() {\n            this.incrementScore('computer', answer.size);\n            this.updateGameState('computer', answer);\n            this.setState({ turnNumber: this.state.turnNumber + 1 });\n            this.setState({ isAccepted: false });\n          }.bind(this), 2000)\n        );\n      });\n    } else if (player === 'human') {\n      this.setState({ isAccepted: true });\n      const recentTurn = comp.recentTurn.city;\n      await this.incrementScore('human', recentTurn.size);\n      await this.updateGameState('human', recentTurn);\n      this.makeTurn('computer');\n    }\n  }\n\n  updateGameState(player, cityObj) {\n    const nextPlayer = player === 'human' ? 'computer' : 'human';\n    cityObj.player = player;\n    cityObj.turnNumber = this.state.turnNumber;\n    cityObj.turnScore = this.state.turnScore;\n    \n    this.markCityAsPlayed(cityObj);\n    this.setState({ turn: {\n      activePlayer: nextPlayer,\n      firstLetter: comp.recentTurn.lastLetter\n      }\n    });    \n    if (nextPlayer === 'human') {\n      this.setState({ message: { \n        code: 3,\n        value: this.state.turn.firstLetter,\n        id: this.state.message.id + 1\n      }});\n      this.runTimer();\n    }\n  }\n  \n  runTimer() {\n    this.setState({ timeLeft: gameConfig.turnLimit });\n    \n    this.timer = setInterval(function() {\n      this.setState({ timeLeft: this.state.timeLeft - 1 });\n      if (this.state.timeLeft <= 0) {\n        clearInterval(this.timer);\n        this.setState({ gameEnded: true});\n        this.setState({ gameStarted: false});\n      }\n    }.bind(this), 1000);\n  }\n  \n  formatGuess(guess) {\n    let options = [];\n    \n    let city = guess.trim();\n    city = city[0].toUpperCase() + city.slice(1);\n    city = city.replace(/\\s+/g, ' ');\n    city = city.replace(/[^а-яА-Я- ]/g, '');\n    options.push(city);\n    \n    if (/ /g.test(city)) {\n      const copy = city;\n      const cityWithDashes = copy.replace(/ /g, '-');\n      const cityWithNoSpaces = copy.replace(/ /g, '');\n      options.push(cityWithDashes);\n      options.push(cityWithNoSpaces);\n    }\n    return options;\n  }\n  \n  markCityAsPlayed(cityObj) {\n    const played = this.state.playedCities.slice();\n    played.push(cityObj);\n    this.setState({ playedCities: played });\n  }\n  \n  incrementScore(player, citySize) {\n    const score = {...this.state.score};\n    let turnScore = NaN;\n  \n    switch(citySize) {\n      case 0: \n        turnScore = gameConfig.cityValue[citySize];\n        score[player] += turnScore;\n        break;\n      case 2:\n        turnScore = gameConfig.cityValue[citySize];\n        score[player] += turnScore;\n        break;\n      default:\n        turnScore = 1;\n        score[player] += turnScore;\n    }\n    this.setState({ turnScore });\n    this.setState({ score });\n  }\n  \n  validateFirstLetter(firstLetter) {\n    if (firstLetter === this.state.turn.firstLetter) return true;\n    \n    if (this.state.turn.firstLetter === 'И' || this.state.turn.firstLetter === 'Й') {\n      if (firstLetter === 'И' || firstLetter === 'Й') {\n        return true;\n      }\n    }\n    \n    if (this.state.turn.firstLetter === 'Ш' || this.state.turn.firstLetter === 'Щ') {\n      if (firstLetter === 'Ш' || firstLetter === 'Щ') {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  onFormSubmit = (guess) => {\n    if (!guess.length) return;\n    this.setState({ message: { code: 0, value: null, id: this.state.message.id }});\n    const cityOptions = this.formatGuess(guess);\n    \n    if (this.state.turn.activePlayer === 'human') {\n        if (this.validateFirstLetter(guess[0].toUpperCase())) {\n          for (let option of cityOptions) {\n            if (comp.alreadyPlayed.has(option)) {\n              this.setState({ message: { \n                code: 1,\n                value: option,\n                id: this.state.message.id + 1\n              }});\n              return;\n            } else if (comp.checkUserInput(option)) {\n              clearInterval(this.timer);\n              this.makeTurn('human');\n              return option;\n            } \n          }\n          this.setState({ message: { \n            code: 2,\n            value: guess,\n            id: this.state.message.id + 1\n          }});\n      } else {\n        this.setState({ message: { \n          code: 3,\n          value: this.state.turn.firstLetter,\n          id: this.state.message.id + 1\n        }});\n      }\n    }\n  }\n  \n  onButtonClick = async () => {\n    comp = new Computer('ru');\n    await this.setState({ gameStarted: true });\n    await this.setState({ gameEnded: false });\n    await this.setState({ playedCities: [] });\n    await this.setState({ turnNumber: 0 });\n    await this.setState({ score: { human: 0, computer: 0 }});\n    await this.setState({ turn: { activePlayer: 'computer', firstLetter: '' }});\n    await this.setState({ message: { code: 0, value: null, id: this.state.message.id }});\n    this.makeTurn('computer');\n  }\n  \n  render() {\n    return (\n      <div className=\"game-wrapper\">\n        <Modal gameStarted={this.state.gameStarted} gameEnded={this.state.gameEnded} score={this.state.score} onButtonClick={this.onButtonClick}/>\n        <Scorebar turn={this.state.turnNumber} score={this.state.score} timeLeft={this.state.timeLeft}/>\n        <TurnsList turn={this.state.turn} turnNumber={this.state.turnNumber} playedCities={this.state.playedCities} gameEnded={this.state.gameEnded}/>\n        { !this.state.gameEnded ? <Message message={this.state.message} gameEnded={this.state.gameEnded} isAccepted={this.state.isAccepted}/> : '' }\n        <UserInput firstLetter={this.state.turn.firstLetter} player={this.state.turn.activePlayer}  gameEnded={this.state.gameEnded} onSubmit={this.onFormSubmit}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}