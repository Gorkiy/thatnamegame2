{"version":3,"sources":["Components/UserInput/UserInput.js","Components/Modal/Modal.js","Components/Scorebar/Scorebar.js","Components/Turn/Turn.js","Components/TurnsList/TurnsList.js","Components/Message/Message.js","Utils/database.js","Utils/Computer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["UserInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFormSubmit","event","preventDefault","onSubmit","state","guess","handleChange","e","setState","target","value","inputRef","React","createRef","buttonRef","prevProps","player","gameEnded","current","disabled","focus","firstLetter","blur","react_default","a","createElement","className","type","ref","onChange","aria-label","Component","ModalBox","posed","div","enter","y","x","scale","opacity","transition","stiffness","damping","default","duration","exit","Modal","isNewRecord","isShown","handleClick","bind","assertThisInitialized","defineRecord","onButtonClick","recordPart","pointsPart","defineWordEnding","score","human","finalScore","title","description","concat","buttonText","computer","Fragment","matchScore","bestScore","localStorage","getItem","Number","setItem","num","gameStarted","pose","getContent","onClick","TimeLeft","span","normal","color","transformOrigin","drama","Scorebar","isTimeRunningOut","timer","_this2","timeLeft","setInterval","clearInterval","turn","Math","floor","calcUserTurn","TurnItem","li","rotateX","delay","charPoses","_ref","charIndex","Turn","isVisible","loading","setTimeout","clearTimeout","city","react_pose_text_es","initialPose","react_spinners","margin","sizeUnit","size","country","prop","turnScore","renderTurnNumber","turnNumber","renderCity","renderCountry","renderBonus","renderScore","TurnsList","listRef","list","scrollTop","scrollHeight","played","playedCities","lastTurn","length","turns","map","cityObj","Components_Turn_Turn","key","currentTurn","activePlayer","blank","push","renderTurns","acceptedMessages","Message","msgRef","message","id","classList","remove","runTimer","add","msg","isAccepted","random","code","lastLetters","renderMsg","citiesData","require","cityAliases","initialDataPrepare","data","cities","bigCities","helper","arr","toUpperCase","forEach","interest","citiesRU","LETTERS","toConsumableArray","keys","FORBIDDEN_LETTERS","Computer","lang","alreadyPlayed","Set","recentTurn","lastLetter","index","randomLetter","getRandomIndex","answer","defineLastLetter","deleteCity","isAlias","checkAlias","checkMatch","dataOnLetter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","toLowerCase","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","alias","original","cityData","filter","indexOf","comp","gameConfig","turnLimit","cityValue","0","1","2","App","cityOptions","formatGuess","validateFirstLetter","option","has","checkUserInput","makeTurn","_callee","regenerator_default","wrap","_context","prev","stop","Promise","resolve","reject","incrementScore","updateGameState","nextPlayer","markCityAsPlayed","options","trim","slice","replace","test","copy","cityWithDashes","cityWithNoSpaces","citySize","_objectSpread","NaN","Components_Modal_Modal","Components_Scorebar_Scorebar","Components_TurnsList_TurnsList","Components_Message_Message","Components_UserInput_UserInput","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","Components_App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d0f70247.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './UserInput.css';\n\nclass UserInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { guess: '' };\n    this.inputRef = React.createRef();\n    this.buttonRef = React.createRef();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (this.props.player === 'human' && !this.props.gameEnded) {\n      if (prevProps.player !== this.props.player) {\n        this.inputRef.current.disabled = false;\n        this.buttonRef.current.disabled = false;\n        if (!this.props.gameEnded) this.inputRef.current.focus();\n        this.setState({ guess: this.props.firstLetter });\n      }\n    } else {\n      this.inputRef.current.disabled = true;\n      this.buttonRef.current.disabled = true;\n    }\n    \n    if (prevProps.gameEnded !== this.props.gameEnded && this.props.gameEnded) {\n      this.inputRef.current.blur();\n      this.setState({ guess: '' });\n      this.inputRef.current.disabled = true;\n      this.buttonRef.current.disabled = true;\n    }    \n  }\n  \n  onFormSubmit = (event) => {\n    event.preventDefault();\n    this.props.onSubmit(this.state.guess);\n  }\n  \n  handleChange = (e) => {\n    this.setState({ guess: e.target.value });\n  }\n  \n  render() {\n    return (\n      <div className=\"guess\">\n        <form className=\"guess__form\" onSubmit={this.onFormSubmit}>\n          <input className=\"guess__input\" type=\"text\" ref={this.inputRef} value={this.state.guess} \n          onChange={this.handleChange} aria-label=\"Введите город\" />\n          <button className=\"guess__button\" type=\"submit\" ref={this.buttonRef} aria-label=\"Город (версия)\"></button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default UserInput;","import React, { Component } from 'react';\nimport posed from 'react-pose';\nimport './Modal.css';\n\nconst ModalBox = posed.div({\n  enter: {\n    y: '-50%',\n    x: '-50%',\n    scale: 1,\n    opacity: 1,\n    transition: {\n      scale: { type: 'spring', stiffness: 500, damping: 15 },\n      default: { duration: 300 }\n    }\n  },\n  exit: {\n    y: '-50%',\n    x: '-50%',\n    scale: 1.5,\n    opacity: 0,\n    transition: { duration: 150 }\n  }\n});\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      isNewRecord: false,\n      isShown: false\n     };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  componentDidMount() {\n    this.setState({ isShown: true });\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.gameEnded !== this.props.gameEnded && this.props.gameEnded) {\n      this.setState({ isShown: true });\n      if (this.defineRecord()) this.setState({ isNewRecord: true });\n    }\n  }\n\n  handleClick() {\n    this.props.onButtonClick();\n    this.setState({ isNewRecord: false });\n    this.setState({ isShown: false });\n  }\n  \n  getContent() {\n    if (this.props.gameEnded) {\n      let recordPart = this.state.isNewRecord ? 'Это, на секундочку, новый рекорд!' : '';\n      let pointsPart = this.defineWordEnding(this.props.score.human);\n      \n      \n      if (this.props.score.human >= this.props.finalScore) {\n        return {\n          title: 'Очень эпично!',\n          description: `Победа! Тебе удалось набрать ${this.props.finalScore} баллов в \"Города\" быстрее компьютера. Совпадение?`,\n          buttonText: 'Не думаю.'\n        }\n      } else if (this.props.score.computer >= this.props.finalScore) {\n        return {\n          title: 'Это фиаско.',\n          description: `Хорошая попытка, но компьютер набрал ${this.props.finalScore} баллов быстрее.`,\n          buttonText: 'Сейчас победим!'\n        }\n      } else {\n        return {\n          title: 'Все, приехали!',\n          description: <React.Fragment>Я насчитал <strong>{this.props.score.human}</strong> балл{pointsPart}. {recordPart}<br/>\n          Желтая кнопка ниже приглашает повторить.</React.Fragment>,\n          buttonText: 'Еще разок.'\n        }\n      }\n    }\n    \n    return {\n      title: 'Новая игра',\n      description: <React.Fragment>Правила очень простые — называй реально существующие города на последнюю букву города, который сыграл компьютер. <br /><br />\n      <strong>Например</strong>: Москва 👉 Амстердам 👉 Мюнхен <br /><br /> Для победы достаточно набрать {this.props.finalScore} баллов быстрее компьютера.</React.Fragment>,\n      buttonText: 'Понятно.'\n    }\n  }\n  \n  defineRecord() {\n    const matchScore = this.props.score.human;\n    let bestScore = 0;\n    \n    if (!localStorage.getItem('bestScore')) {\n      localStorage.setItem('bestScore', matchScore);\n    } else {\n      bestScore = Number(localStorage.getItem('bestScore'));\n      \n      if (matchScore > bestScore) localStorage.setItem('bestScore', matchScore);\n    }\n    return matchScore > bestScore;\n  }\n  \n  defineWordEnding(num) {\n    if (num % 100 >= 11 && num % 100 <= 19) return 'ов';\n    if (num % 10 === 1) return '';\n    if (num % 10 >= 2 && num % 10 <= 4) return 'а';\n    return 'ов';\n  }\n  \n  render() {\n    const gameStarted = !this.props.gameStarted || this.props.gameEnded ? 'modal_show' : '';\n    const isShown = this.state.isShown ? true : false;\n        \n    return (\n      <div className={`modal ${gameStarted}`}>\n        <ModalBox className=\"modal-content\" pose={isShown ? 'enter' : 'exit'} >\n          <h2 className=\"modal__title\">{this.getContent().title}</h2>\n          <p className=\"modal__description\">{this.getContent().description}</p>\n          <button className=\"modal__button\" type=\"button\" onClick={this.handleClick}>{this.getContent().buttonText}\n          </button>\n          </ModalBox>\n      </div>\n    );\n  }\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport posed from 'react-pose';\nimport './Scorebar.css';\n\nconst TimeLeft = posed.span({\n  normal: {\n    scale: 1,\n    opacity: 1,\n    color: '#FFFFFF',\n    transformOrigin: 'bottom',\n    transition: {\n      scale: { type: 'spring', stiffness: 700, damping: 20 },\n      duration: 150 \n    }\n  },\n  drama: {\n    scale: 1.3,\n    opacity: 0.8,\n    color: '#FD8A2E',\n    transition: { duration: 150 }\n  }\n});\n\nclass Scorebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isTimeRunningOut: false }\n    this.timer = null;\n  }\n  \n  componentDidUpdate() {\n    if (this.props.timeLeft === 5 && !this.timer) {\n      this.timer = setInterval(() => {\n        this.setState({ isTimeRunningOut: !this.state.isTimeRunningOut });\n        if (this.props.timeLeft <= 0 || this.props.gameEnded) {\n          clearInterval(this.timer);\n          this.setState({ isTimeRunningOut: false});\n        }\n      }, 250);\n    }\n  }\n  \n  componentWillUnmount() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n  \n  calcUserTurn() {\n    if (this.props.turn <= 1) return 0;\n    return Math.floor((this.props.turn) / 2);\n  }\n  \n  render() {\n    const { isTimeRunningOut } = this.state;\n    \n    return (\n      <div className=\"scorebar-wrapper\">\n        <div className=\"scorebar\">\n          <div className=\"scorebar__item scorebar__item--score\">\n            <span className=\"scorebar__value scorebar__value--score scorebar__value--human\">{this.props.score.human}</span>\n            <span className=\"scorebar__value scorebar__value--score scorebar__value--computer\">{this.props.score.computer}</span>\n          </div>\n          <div className=\"scorebar__item\">\n            <TimeLeft className=\"scorebar__value\" pose={isTimeRunningOut ? 'drama' : 'normal'}>\n              {this.props.timeLeft}\n            </TimeLeft>\n            <span className=\"scorebar__caption\">Время на ход</span>\n          </div>\n          <div className=\"scorebar__item\">\n            <span className=\"scorebar__value\">{this.calcUserTurn()}</span>\n            <span className=\"scorebar__caption\">Номер рейса</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Scorebar;","import React, { Component } from 'react';\nimport { PulseLoader } from 'react-spinners';\nimport SplitText from 'react-pose-text';\nimport posed from 'react-pose';\nimport './Turn.css';\n\nconst TurnItem = posed.li({\n  enter: {\n    y: -5,\n    rotateX: 0,\n    opacity: 1,\n    delay: 0,\n    transformOrigin: 'bottom',\n    transition: {\n      rotateX: { type: 'spring', stiffness: 400, damping: 18 },\n      default: { duration: 500 }\n    }\n  },\n  exit: {\n    rotateX: 180,\n    opacity: 0,\n    transition: { duration: 500 }\n  }\n});\n\nconst charPoses = {\n  exit: { opacity: 0, y: 20 },\n  enter: {\n    opacity: 1,\n    y: 0,\n    delay: ({ charIndex }) => charIndex * 30\n  }\n};\n\nclass Turn extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: false,\n      loading: true\n    }\n    this.timer = null;\n  }\n  \n  componentDidMount() {\n    this.timer = setTimeout(() => {\n      this.setState({ isVisible: true });\n    }, 200);\n  }\n  \n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n  \n  renderCity() {\n    if (!this.props.city) {\n      return (\n        <div className=\"turns__spinner-wrapper\">\n          { this.props.firstLetter ? <span className=\"turns__first-letter\">{this.props.firstLetter}</span> : '' }\n          <span className=\"turns__spinner\">\n            <PulseLoader\n            margin={\"3px\"}\n            sizeUnit={\"4px\"}\n            size={0}\n            color={'#FD8A2E'}\n            loading={this.state.loading}\n            />\n          </span>\n        </div>\n      )\n    } else {\n      return <SplitText initialPose=\"exit\" pose=\"enter\" charPoses={charPoses}>{this.props.city}</SplitText>;\n    }\n  }\n  \n  renderCountry() {\n    if (this.props.city) {\n      return this.props.country;\n    }\n  }\n  \n  renderTurnNumber(prop) {\n    if (prop <= 1) {\n      return 1;\n    } else {\n      return prop;\n    }\n  }\n  \n  renderBonus() {\n    switch(this.props.size) {\n      case 0: \n        return '· Столица (+2)';\n      case 2:\n        return '· Мегаполис (+1)';\n      default: \n        return '';\n    }\n  }\n  \n  renderScore() {\n    if (this.props.turnScore) {\n      return (\n        <div className=\"turns__score\">\n          {this.props.turnScore}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const { isVisible } = this.state;\n    \n    return (\n      <TurnItem className=\"turns__item\" pose={isVisible ? 'enter' : 'exit'}>\n        <div className=\"turns__city-wrapper\">\n          <span className=\"turns__number\">\n            {this.renderTurnNumber(this.props.turnNumber)}\n          </span>\n          <span className=\"turns__city\">\n              {this.renderCity()}\n          </span>\n          <span className=\"turns__country\">\n            {this.renderCountry()}\n          </span>\n          <span className=\"turns__bonus\">\n            {this.renderBonus()}\n          </span>\n        </div>\n        <div className={ `turns__player turns__player--${this.props.player}` }>\n        </div>\n        {this.renderScore()}\n      </TurnItem>\n    )\n  }\n}\n\nexport default Turn;","import React, { Component } from 'react';\nimport Turn from '../Turn/Turn';\nimport './TurnsList.css';\n\nclass TurnsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isVisible: false };\n    this.listRef = React.createRef();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.turnNumber !== this.props.turnNumber) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight;\n    }\n  }\n  \n  renderTurns() {  \n    const played = this.props.playedCities;\n    const lastTurn = played.length ? played[played.length - 1].turnNumber + 1 : 1;\n    \n    const turns = this.props.playedCities.map(cityObj => {\n      return <Turn key={cityObj.turnNumber} turnNumber={cityObj.turnNumber} turnScore={cityObj.turnScore} city={cityObj.city} size={cityObj.size} country={cityObj.country} player={cityObj.player} />;\n    });\n    \n    if (this.props.gameStarted && !this.props.gameEnded) {\n      let currentTurn = <Turn key={lastTurn} turnNumber={this.props.turnNumber} firstLetter={this.props.turn.firstLetter} player={this.props.turn.activePlayer} blank={true} />\n      turns.push(currentTurn);\n    }\n    return turns;\n  }\n  \n  render() {\n    return (\n      <div className=\"turns__container\" ref={this.listRef}>\n        <ul className=\"turns\">\n          {this.renderTurns()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default TurnsList;","import React, { Component } from 'react';\nimport './Message.css';\n\nconst acceptedMessages = [\n  'Океюшки!',\n  'Красивая у них площадь в центре!',\n  'Очень хорошо!',\n  'Компьютера не обыграешь!',\n  'Кофе у них так себе.',\n  'Вот бы туда сгонять на выходные!'\n]\n\nclass Message extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isShown: false };\n    this.msgRef = React.createRef();\n    this.timer = null;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.message.id !== this.props.message.id && !this.props.gameEnded) {\n      this.setState({ isShown: true });\n      this.msgRef.current.classList.remove('visually-hidden');\n      this.runTimer(this.props.message.id);\n    }\n  }\n  \n  componentWillUnmount() {\n    clearTimeout(this.timer);\n  }\n  \n  runTimer(id) {\n    this.timer = setTimeout(function() {\n      this.setState({ isShown: false });\n      this.msgRef.current.classList.add('visually-hidden');\n      if (id !== this.props.message.id || this.props.gameEnded) {\n        clearTimeout(this.timer);\n        this.setState({ isShown: true });\n        this.msgRef.current.classList.remove('visually-hidden');\n      }\n    }.bind(this), 5000);\n  }\n  \n  renderMsg() {\n    if (this.props.gameEnded) return;\n    let msg, messageElement;\n    \n    if (this.props.isAccepted) {\n      let displayChance = Math.random() * 100;\n      \n      if (displayChance > 66) {\n        msg = acceptedMessages[Math.floor(Math.random() * acceptedMessages.length)];\n        return <p className=\"guess__message\">{msg}</p>;\n      }\n    }\n    \n    if (this.props.message.code) {\n      switch(this.props.message.code) {\n        case 1:\n          msg = <React.Fragment>\n            Город <span className=\"guess__accent\">{this.props.message.value}</span> уже был сыгран в этом матче.\n          </React.Fragment>\n          break;\n        case 2:\n          msg = <React.Fragment>\n            Не знаю города <span className=\"guess__accent\">{this.props.message.value}</span>\n          </React.Fragment>\n          break;\n        case 3:\n          let lastLetters = [];\n          if (this.props.message.value === 'И' || this.props.message.value === 'Й') {\n            lastLetters = ['И', 'Й'];\n          }\n          if (this.props.message.value === 'Ш' || this.props.message.value === 'Щ') {\n            lastLetters = ['Ш', 'Щ'];\n          }\n          \n          if (!lastLetters.length) {\n            msg = <React.Fragment>\n              Нужно сыграть город на <span className=\"guess__accent\">{this.props.message.value}</span>\n            </React.Fragment>\n          } else {\n            \n            msg = <React.Fragment>\n              Нужно сыграть город на <span className=\"guess__accent\">{lastLetters[0]}</span> или <span className=\"guess__accent\">{lastLetters[1]}</span>\n            </React.Fragment>\n          }\n          break;\n        default:\n          msg = \"\";\n      }\n      \n      messageElement = <p className=\"guess__message\">{msg}</p>;\n      return messageElement;\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"guess__msg-wrapper\" ref={this.msgRef}>\n        {this.renderMsg()}\n      </div>\n    );\n  }\n}\n\nexport default Message;","export const citiesData = require('./cities-ru.json');\nexport const cityAliases = require('./cityAliases-ru.json');\n\nexport function initialDataPrepare(data) {\n  const cities = [];\n  const bigCities = [];\n  \n  function helper(arr, cityObj) {\n    const firstLetter = cityObj.city[0].toUpperCase();      \n    if (!arr[firstLetter]) {\n      arr[firstLetter] = [];\n      arr[firstLetter].push(cityObj);\n    } else {\n      arr[firstLetter].push(cityObj);\n    }\n  }\n  \n  data.forEach(city => {\n    if (city.size !== 1 || city.interest) {\n      helper(bigCities, city);\n    } else {\n      helper(cities, city);\n    }\n  })\n  return { bigCities, cities };\n}","import { citiesData, initialDataPrepare, cityAliases} from './database';\n\nconst citiesRU = initialDataPrepare(citiesData);\n// size: 0 — Capital\n// size: 1 - Small or medium city\n// size: 2 — Big city (> 1m population)\nconst LETTERS = [...Object.keys(citiesRU.bigCities)];\nconst FORBIDDEN_LETTERS = ['ь', 'ъ', 'ы', 'ф'];\n\nclass Computer {\n  constructor(lang) {\n    this.data = initialDataPrepare(citiesData);\n    this.alreadyPlayed = new Set();\n    this.recentTurn = {\n      city: {},\n      lastLetter: ''\n    }\n  }\n  \n  answer(firstLetter) {\n    const bigCities = this.data.bigCities;\n    const cities = this.data.cities;\n    let data = [];\n    let index = null;\n    \n    if (!firstLetter) {\n      let randomLetter = LETTERS[this.getRandomIndex(LETTERS)];\n      // Check if cities are still available on random letter\n      while (!cities[randomLetter].length || !bigCities[randomLetter].length) {\n        randomLetter = LETTERS[this.getRandomIndex(LETTERS)];\n      }\n      firstLetter = randomLetter;\n    }\n    \n    if (bigCities[firstLetter].length) {\n      index = this.getRandomIndex(bigCities[firstLetter]);\n      data = bigCities[firstLetter];\n    } else if (cities[firstLetter].length) {\n      index = this.getRandomIndex(cities[firstLetter]);\n      data = cities[firstLetter];\n    } else {\n      return false;\n    }\n    \n    const answer = data[index];\n    this.recentTurn.city = answer;\n    this.defineLastLetter(answer.city);\n    this.deleteCity(answer);\n    return answer;\n  }\n  \n  checkUserInput(guess) {\n    const firstLetter = guess[0].toUpperCase();\n    const isAlias = this.checkAlias(guess);\n    guess = isAlias ? isAlias : guess;\n    \n    if (this.checkMatch(this.data.bigCities[firstLetter], guess)) return true;\n    if (this.checkMatch(this.data.cities[firstLetter], guess)) return true;\n    return false;\n  }\n  \n  checkMatch(dataOnLetter, guess) {\n    for (let cityObj of dataOnLetter) {\n      if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n        this.recentTurn = {\n          city: cityObj,\n          lastLetter: this.defineLastLetter(cityObj.city)\n        }\n        this.deleteCity(cityObj);\n        return true;\n      }\n    }\n  }\n  \n  checkAlias(guess) {\n    for (let city of cityAliases) {\n      if (city.alias.toLowerCase() === guess.toLowerCase()) {\n        return city.original;\n      }\n    }\n    return null;\n  }\n  \n  deleteCity(cityData) {\n    const city = cityData.city;\n    this.alreadyPlayed.add(city);\n    const firstLetter = city[0].toUpperCase();\n    \n    if (cityData.size === 1 && !cityData.interest.length) {\n      const cities = this.data.cities[firstLetter].filter(cityObj => {\n        return cityObj.city !== city;\n      });\n      this.data.cities[firstLetter] = cities;\n    } else {\n      const bigCities = this.data.bigCities[firstLetter].filter(cityObj => {\n        return cityObj.city !== city;\n      });\n      this.data.bigCities[firstLetter] = bigCities;\n    }\n  }\n  \n  defineLastLetter(city) {\n    let index = city.length - 1;\n    let lastLetter = city[index];\n    \n    while (FORBIDDEN_LETTERS.indexOf(lastLetter) !== -1) {\n      index--;\n      lastLetter = city[index];\n    }\n    this.recentTurn.lastLetter = lastLetter.toUpperCase();\n    return lastLetter.toUpperCase();\n  }\n  \n  getRandomIndex(arr) {\n    return Math.floor(Math.random() * (arr.length - 1));\n  }  \n}\n\nexport default Computer;","import React, { Component } from 'react';\nimport UserInput from '../UserInput/UserInput';\nimport Modal from '../Modal/Modal';\nimport Scorebar from '../Scorebar/Scorebar';\nimport TurnsList from '../TurnsList/TurnsList';\nimport Message from '../Message/Message';\nimport Computer from '../../Utils/Computer';\nimport './App.css';\n\nlet comp = new Computer('ru');\nconst gameConfig = {\n  turnLimit: 60,\n  finalScore: 100,\n  cityValue: {'0': 3, '1': 1, '2': 2}\n}\n\nclass App extends Component {\n  state = {\n    gameStarted: false,\n    gameEnded: false,\n    turn: {\n      activePlayer: 'computer',\n      firstLetter: ''\n    },\n    playedCities: [],\n    turnNumber: 0,\n    timeLeft: gameConfig.turnLimit,\n    score: {\n      human: 0,\n      computer: 0\n    },\n    turnScore: null,\n    message: {\n      code: 0,\n      value: null,\n      id: 0\n    },\n    isAccepted: false\n  }\n\n  async makeTurn(player) {\n    if (player === 'computer' && !this.state.gameEnded) {\n      await this.setState({ turnNumber: this.state.turnNumber + 1 });\n      const answer = comp.answer(this.state.turn.firstLetter);\n      await new Promise((resolve, reject) => {\n        resolve(\n          setTimeout(function() {\n            this.incrementScore('computer', answer.size);\n            this.updateGameState('computer', answer);\n            this.setState({ turnNumber: this.state.turnNumber + 1 });\n            this.setState({ isAccepted: false });\n          }.bind(this), 2000)\n        );\n      });\n    } else if (player === 'human' && !this.state.gameEnded) {\n      this.setState({ isAccepted: true });\n      const recentTurn = comp.recentTurn.city;\n      await this.incrementScore('human', recentTurn.size);\n      await this.updateGameState('human', recentTurn);\n      if (!this.state.gameEnded) this.makeTurn('computer');\n    }\n  }\n\n  updateGameState(player, cityObj) {\n    if (this.state.score[player] >= gameConfig.finalScore) this.setState({ gameEnded: true });\n    \n    const nextPlayer = player === 'human' ? 'computer' : 'human';\n    cityObj.player = player;\n    cityObj.turnNumber = this.state.turnNumber;\n    cityObj.turnScore = this.state.turnScore;\n    \n    this.markCityAsPlayed(cityObj);\n    this.setState({ turn: {\n      activePlayer: nextPlayer,\n      firstLetter: comp.recentTurn.lastLetter\n      }\n    });    \n    if (nextPlayer === 'human') {\n      this.setState({ message: { \n        code: 3,\n        value: this.state.turn.firstLetter,\n        id: this.state.message.id + 1\n      }});\n      this.runTimer();\n    }\n  }\n  \n  runTimer() {\n    this.setState({ timeLeft: gameConfig.turnLimit });\n    \n    this.timer = setInterval(function() {\n      this.setState({ timeLeft: this.state.timeLeft - 1 });\n      if (this.state.timeLeft <= 0 || this.state.score.human >= gameConfig.finalScore || this.state.score.computer >= gameConfig.finalScore) {\n        clearInterval(this.timer);\n        this.setState({ gameEnded: true});\n        this.setState({ gameStarted: false});\n      }\n    }.bind(this), 1000);\n  }\n  \n  formatGuess(guess) {\n    let options = [];\n    \n    let city = guess.trim();\n    city = city[0].toUpperCase() + city.slice(1);\n    city = city.replace(/\\s+/g, ' ');\n    city = city.replace(/[^а-яА-Я- ]/g, '');\n    options.push(city);\n    \n    if (/ /g.test(city)) {\n      const copy = city;\n      const cityWithDashes = copy.replace(/ /g, '-');\n      const cityWithNoSpaces = copy.replace(/ /g, '');\n      options.push(cityWithDashes);\n      options.push(cityWithNoSpaces);\n    }\n    return options;\n  }\n  \n  markCityAsPlayed(cityObj) {\n    const played = this.state.playedCities.slice();\n    played.push(cityObj);\n    this.setState({ playedCities: played });\n  }\n  \n  incrementScore(player, citySize) {\n    const score = {...this.state.score};\n    let turnScore = NaN;\n  \n    switch(citySize) {\n      case 0: \n        turnScore = gameConfig.cityValue[citySize];\n        score[player] += turnScore;\n        break;\n      case 2:\n        turnScore = gameConfig.cityValue[citySize];\n        score[player] += turnScore;\n        break;\n      default:\n        turnScore = 1;\n        score[player] += turnScore;\n    }\n    this.setState({ turnScore });\n    this.setState({ score });\n  }\n  \n  validateFirstLetter(firstLetter) {\n    if (firstLetter === this.state.turn.firstLetter) return true;\n    \n    if (this.state.turn.firstLetter === 'И' || this.state.turn.firstLetter === 'Й') {\n      if (firstLetter === 'И' || firstLetter === 'Й') {\n        return true;\n      }\n    }\n    \n    if (this.state.turn.firstLetter === 'Ш' || this.state.turn.firstLetter === 'Щ') {\n      if (firstLetter === 'Ш' || firstLetter === 'Щ') {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  onFormSubmit = (guess) => {\n    if (!guess.length) return;\n    this.setState({ message: { code: 0, value: null, id: this.state.message.id }});\n    const cityOptions = this.formatGuess(guess);\n    \n    if (this.state.turn.activePlayer === 'human') {\n        if (this.validateFirstLetter(guess[0].toUpperCase())) {\n          for (let option of cityOptions) {\n            if (comp.alreadyPlayed.has(option)) {\n              this.setState({ message: { \n                code: 1,\n                value: option,\n                id: this.state.message.id + 1\n              }});\n              return;\n            } else if (comp.checkUserInput(option)) {\n              clearInterval(this.timer);\n              this.makeTurn('human');\n              return option;\n            } \n          }\n          this.setState({ message: { \n            code: 2,\n            value: guess,\n            id: this.state.message.id + 1\n          }});\n      } else {\n        this.setState({ message: { \n          code: 3,\n          value: this.state.turn.firstLetter,\n          id: this.state.message.id + 1\n        }});\n      }\n    }\n  }\n  \n  onButtonClick = async () => {\n    comp = new Computer('ru');\n    await this.setState({ gameStarted: true });\n    await this.setState({ gameEnded: false });\n    await this.setState({ playedCities: [] });\n    await this.setState({ turnNumber: 0 });\n    await this.setState({ score: { human: 0, computer: 0 }});\n    await this.setState({ turn: { activePlayer: 'computer', firstLetter: '' }});\n    await this.setState({ message: { code: 0, value: null, id: this.state.message.id }});\n    this.makeTurn('computer');\n  }\n  \n  render() {\n    return (\n      <div className=\"game-wrapper\">\n        <Modal gameStarted={this.state.gameStarted} gameEnded={this.state.gameEnded} score={this.state.score} finalScore={gameConfig.finalScore} onButtonClick={this.onButtonClick}/>\n        <Scorebar turn={this.state.turnNumber} score={this.state.score} timeLeft={this.state.timeLeft} gameEnded={this.state.gameEnded}/>\n        <TurnsList turn={this.state.turn} turnNumber={this.state.turnNumber} playedCities={this.state.playedCities} gameStarted={this.state.gameStarted} gameEnded={this.state.gameEnded}/>\n        { !this.state.gameEnded ? <Message message={this.state.message} gameEnded={this.state.gameEnded} isAccepted={this.state.isAccepted}/> : '' }\n        <UserInput firstLetter={this.state.turn.firstLetter} player={this.state.turn.activePlayer}  gameEnded={this.state.gameEnded} onSubmit={this.onFormSubmit}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}