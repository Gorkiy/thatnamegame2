{"version":3,"sources":["Components/UserInput/UserInput.js","Components/Modal/Modal.js","Components/Scorebar/Scorebar.js","Components/Turn/Turn.js","Components/TurnsList/TurnsList.js","Components/Message/Message.js","Utils/database.js","Utils/Computer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["UserInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFormSubmit","event","preventDefault","onSubmit","state","guess","handleChange","e","setState","target","value","inputRef","React","createRef","buttonRef","prevProps","player","gameEnded","current","disabled","focus","firstLetter","blur","react_default","a","createElement","className","type","ref","onChange","Component","Modal","isNewRecord","handleClick","bind","assertThisInitialized","defineRecord","onButtonClick","recordPart","pointsPart","defineWordEnding","score","human","title","description","Fragment","buttonText","matchScore","bestScore","Infinity","localStorage","getItem","Number","setItem","num","gameStarted","concat","getContent","onClick","TimeLeft","posed","span","normal","scale","opacity","color","transformOrigin","transition","stiffness","damping","duration","drama","Scorebar","isTimeRunningOut","timer","_this2","timeLeft","setInterval","clearInterval","turn","Math","floor","computer","pose","calcUserTurn","TurnItem","li","enter","y","rotateX","delay","default","exit","Turn","isVisible","loading","setTimeout","clearTimeout","city","react_spinners","margin","sizeUnit","size","country","prop","turnScore","renderTurnNumber","turnNumber","renderCity","renderCountry","renderBonus","renderScore","TurnsList","listRef","list","scrollTop","scrollHeight","played","playedCities","lastTurn","length","turns","map","cityObj","Components_Turn_Turn","key","currentTurn","activePlayer","blank","push","renderTurns","acceptedMessages","Message","isShown","msgRef","message","id","classList","remove","runTimer","add","msg","isAccepted","random","code","lastLetters","renderMsg","citiesData","require","cityAliases","initialDataPrepare","data","cities","bigCities","helper","arr","toUpperCase","forEach","interest","citiesRU","LETTERS","toConsumableArray","keys","FORBIDDEN_LETTERS","Computer","lang","alreadyPlayed","Set","recentTurn","lastLetter","index","randomLetter","getRandomIndex","answer","defineLastLetter","deleteCity","isAlias","checkAlias","checkMatch","dataOnLetter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","toLowerCase","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","alias","original","cityData","filter","indexOf","comp","gameConfig","turnLimit","cityValue","0","1","2","App","cityOptions","formatGuess","validateFirstLetter","option","has","checkUserInput","makeTurn","_callee","regenerator_default","wrap","_context","prev","stop","Promise","resolve","reject","incrementScore","updateGameState","nextPlayer","markCityAsPlayed","options","trim","slice","replace","test","copy","cityWithDashes","cityWithNoSpaces","citySize","_objectSpread","NaN","Components_Modal_Modal","Components_Scorebar_Scorebar","Components_TurnsList_TurnsList","Components_Message_Message","Components_UserInput_UserInput","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","Components_App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.543de4b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './UserInput.css';\n\nclass UserInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { guess: '' };\n    this.inputRef = React.createRef();\n    this.buttonRef = React.createRef();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (this.props.player === 'human' && !this.props.gameEnded) {\n      if (prevProps.player !== this.props.player) {\n        this.inputRef.current.disabled = false;\n        this.buttonRef.current.disabled = false;\n        if (!this.props.gameEnded) this.inputRef.current.focus();\n        this.setState({ guess: this.props.firstLetter });\n      }\n    } else {\n      this.inputRef.current.disabled = true;\n      this.buttonRef.current.disabled = true;\n    }\n    \n    if (prevProps.gameEnded !== this.props.gameEnded && this.props.gameEnded) {\n      this.inputRef.current.blur();\n      this.setState({ guess: '' });\n      this.inputRef.current.disabled = true;\n      this.buttonRef.current.disabled = true;\n    }    \n  }\n  \n  onFormSubmit = (event) => {\n    event.preventDefault();\n    this.props.onSubmit(this.state.guess);\n  }\n  \n  handleChange = (e) => {\n    this.setState({ guess: e.target.value });\n  }\n  \n  render() {\n    return (\n      <div className=\"guess\">\n        <form className=\"guess__form\" onSubmit={this.onFormSubmit}>\n          <input className=\"guess__input\" type=\"text\" ref={this.inputRef} value={this.state.guess} \n          onChange={this.handleChange} />\n          <button className=\"guess__button\" type=\"submit\" ref={this.buttonRef}></button>\n          \n        </form>\n      </div>\n    );\n  }\n}\n\nexport default UserInput;","import React, { Component } from 'react';\nimport './Modal.css';\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isNewRecord: false };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.gameEnded !== this.props.gameEnded && this.props.gameEnded) {\n      if (this.defineRecord()) this.setState({ isNewRecord: true });\n    }\n  }\n\n  handleClick() {\n    this.props.onButtonClick();\n    this.setState({ isNewRecord: false });\n  }\n  \n  getContent() {\n    if (this.props.gameEnded) {\n      let recordPart = this.state.isNewRecord ? 'Это, на секундочку, новый рекорд!' : '';\n      let pointsPart = this.defineWordEnding(this.props.score.human);\n\n      return {\n        title: 'Все, приехали!',\n        description: <React.Fragment>Я насчитал <strong>{this.props.score.human}</strong> балл{pointsPart}. {recordPart}<br/>\n        Желтая кнопка ниже приглашает повторить.</React.Fragment>,\n        buttonText: 'Еще разок.'\n      }\n    }\n    \n    return {\n      title: 'Новая игра',\n      description: <React.Fragment>Правила очень простые — называй реально существующие города на последнюю букву города, который сыграл компьютер. <br /><br />\n      <strong>Например</strong>: Москва 👉 Амстердам 👉 Мюнхен <br /><br /> P.S. Кстати, у компьютера выиграть невозможно, поэтому не расстраивайся.</React.Fragment>,\n      buttonText: 'Понятно.'\n    }\n  }\n  \n  defineRecord() {\n    const matchScore = this.props.score.human;\n    let bestScore = -Infinity;\n    \n    if (!localStorage.getItem('bestScore')) {\n      localStorage.setItem('bestScore', matchScore);\n    } else {\n      bestScore = Number(localStorage.getItem('bestScore'));\n      \n      if (matchScore > bestScore) localStorage.setItem('bestScore', matchScore);\n    }\n    return matchScore > bestScore;\n  }\n  \n  defineWordEnding(num) {\n    if (num % 100 >= 11 && num % 100 <= 19) return 'ов';\n    if (num % 10 === 1) return '';\n    if (num % 10 >= 2 && num % 10 <= 4) return 'а';\n    return 'ов';\n  }\n  \n  render() {\n    const gameStarted = !this.props.gameStarted || this.props.gameEnded ? \"modal_show\" : \"\";\n    \n    return (\n      <div className={`modal ${gameStarted}`}>\n        <div className=\"modal-content\">\n          <h2 className=\"modal__title\">{this.getContent().title}</h2>\n          <p className=\"modal__description\">{this.getContent().description}</p>\n          <button className=\"modal__button\" type=\"button\" onClick={this.handleClick}>{this.getContent().buttonText}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport posed from 'react-pose';\nimport './Scorebar.css';\n\nconst TimeLeft = posed.span({\n  normal: {\n    scale: 1,\n    opacity: 1,\n    color: '#ffffff',\n    transformOrigin: 'bottom',\n    transition: {\n      scale: { type: 'spring', stiffness: 700, damping: 20 },\n      duration: 150 \n    }\n  },\n  drama: {\n    scale: 1.3,\n    opacity: 0.8,\n    color: '#FD8A2E',\n    transition: { duration: 150 }\n  }\n});\n\nclass Scorebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isTimeRunningOut: false }\n    this.timer = null;\n  }\n  \n  componentDidUpdate() {\n    if (this.props.timeLeft === 5 && !this.timer) {\n      this.timer = setInterval(() => {\n        this.setState({ isTimeRunningOut: !this.state.isTimeRunningOut });\n        if (this.props.timeLeft <= 0 || this.props.gameEnded) {\n          clearInterval(this.timer);\n          this.setState({ isTimeRunningOut: false});\n        }\n      }, 250);\n    }\n  }\n  \n  componentWillUnmount() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n  \n  calcUserTurn() {\n    if (this.props.turn <= 1) return 0;\n    return Math.floor((this.props.turn) / 2);\n  }\n  \n  render() {\n    const { isTimeRunningOut } = this.state;\n    \n    return (\n      <div className=\"scorebar-wrapper\">\n        <div className=\"scorebar\">\n          <div className=\"scorebar__item scorebar__item--score\">\n            <span className=\"scorebar__value scorebar__value--score scorebar__value--human\">{this.props.score.human}</span>\n            <span className=\"scorebar__value scorebar__value--score scorebar__value--computer\">{this.props.score.computer}</span>\n          </div>\n          <div className=\"scorebar__item\">\n            <TimeLeft className=\"scorebar__value\" pose={isTimeRunningOut ? 'drama' : 'normal'}>\n              {this.props.timeLeft}\n            </TimeLeft>\n            <span className=\"scorebar__caption\">Время на ход</span>\n          </div>\n          <div className=\"scorebar__item\">\n            <span className=\"scorebar__value\">{this.calcUserTurn()}</span>\n            <span className=\"scorebar__caption\">Номер рейса</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Scorebar;","import React, { Component } from 'react';\nimport { PulseLoader } from 'react-spinners';\nimport posed from 'react-pose';\nimport './Turn.css';\n\nconst TurnItem = posed.li({\n  enter: {\n    y: -5,\n    rotateX: 0,\n    opacity: 1,\n    delay: 0,\n    transformOrigin: 'bottom',\n    transition: {\n      rotateX: { type: 'spring', stiffness: 400, damping: 18 },\n      default: { duration: 500 }\n    }\n  },\n  exit: {\n    rotateX: 180,\n    opacity: 0,\n    transition: { duration: 500 }\n  }\n});\n\nclass Turn extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: false,\n      loading: true\n    }\n    this.timer = null;\n  }\n  \n  componentDidMount() {\n    this.timer = setTimeout(() => {\n      this.setState({ isVisible: true });\n    }, 200);\n  }\n  \n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n  \n  renderCity() {\n    if (!this.props.city) {\n      return (\n        <div className=\"turns__spinner-wrapper\">\n          { this.props.firstLetter ? <span className=\"turns__first-letter\">{this.props.firstLetter}</span> : '' }\n          <span className=\"turns__spinner\">\n            <PulseLoader\n            margin={\"3px\"}\n            sizeUnit={\"4px\"}\n            size={0}\n            color={'#FD8A2E'}\n            loading={this.state.loading}\n            />\n          </span>\n        </div>\n      )\n    } else {\n      return this.props.city;\n    }\n  }\n  \n  renderCountry() {\n    if (this.props.city) {\n      return this.props.country;\n    }\n  }\n  \n  renderTurnNumber(prop) {\n    if (prop <= 1) {\n      return 1;\n    } else {\n      return prop;\n    }\n  }\n  \n  renderBonus() {\n    switch(this.props.size) {\n      case 0: \n        return '· Столица (+2)';\n      case 2:\n        return '· Мегаполис (+1)';\n      default: \n        return '';\n    }\n  }\n  \n  renderScore() {\n    if (this.props.turnScore) {\n      return (\n        <div className=\"turns__score\">\n          {this.props.turnScore}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const { isVisible } = this.state;\n    \n    return (\n      <TurnItem className=\"turns__item\" pose={isVisible ? 'enter' : 'exit'}>\n        <div className=\"turns__city-wrapper\">\n          <span className=\"turns__number\">\n            {this.renderTurnNumber(this.props.turnNumber)}\n          </span>\n          <span className=\"turns__city\">\n            {this.renderCity()}\n          </span>\n          <span className=\"turns__country\">\n            {this.renderCountry()}\n          </span>\n          <span className=\"turns__bonus\">\n            {this.renderBonus()}\n          </span>\n        </div>\n        <div className={ `turns__player turns__player--${this.props.player}` }>\n        </div>\n        {this.renderScore()}\n      </TurnItem>\n    )\n  }\n}\n\nexport default Turn;","import React, { Component } from 'react';\nimport Turn from '../Turn/Turn';\nimport './TurnsList.css';\n\nclass TurnsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isVisible: false };\n    this.listRef = React.createRef();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.turnNumber !== this.props.turnNumber) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight;\n    }\n  }\n  \n  renderTurns() {  \n    const played = this.props.playedCities;\n    const lastTurn = played.length ? played[played.length - 1].turnNumber + 1 : 1;\n    \n    const turns = this.props.playedCities.map(cityObj => {\n      return <Turn key={cityObj.turnNumber} turnNumber={cityObj.turnNumber} turnScore={cityObj.turnScore} city={cityObj.city} size={cityObj.size} country={cityObj.country} player={cityObj.player} />;\n    });\n    \n    if (this.props.gameStarted && !this.props.gameEnded) {\n      let currentTurn = <Turn key={lastTurn} turnNumber={this.props.turnNumber} firstLetter={this.props.turn.firstLetter} player={this.props.turn.activePlayer} blank={true} />\n      turns.push(currentTurn);\n    }\n    return turns;\n  }\n  \n  render() {\n    return (\n      <div className=\"turns__container\" ref={this.listRef}>\n        <ul className=\"turns\">\n          {this.renderTurns()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default TurnsList;","import React, { Component } from 'react';\nimport './Message.css';\n\nconst acceptedMessages = [\n  'Океюшки!',\n  'Красивая у них площадь в центре!',\n  'Очень хорошо!',\n  'Компьютера не обыграешь!',\n  'Кофе у них так себе.',\n  'Вот бы туда сгонять на выходные!'\n]\n\nclass Message extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { timer: null, isShown: false };\n    this.msgRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.message.id !== this.props.message.id) {\n      this.setState({ isShown: true });\n      this.msgRef.current.classList.remove('visually-hidden');\n      this.runTimer(this.props.message.id);\n    }\n  }\n  \n  runTimer(id) {\n    this.timer = setTimeout(function() {\n      this.setState({ isShown: false });\n      this.msgRef.current.classList.add('visually-hidden');\n      if (id !== this.props.message.id) {\n        clearInterval(this.timer);\n        this.setState({ isShown: true });\n        this.msgRef.current.classList.remove('visually-hidden');\n      }\n    }.bind(this), 5000);\n  }\n  \n  renderMsg() {\n    if (this.props.gameEnded) return;\n    let msg, messageElement;\n    \n    if (this.props.isAccepted) {\n      let displayChance = Math.random() * 100;\n      \n      if (displayChance > 66) {\n        msg = acceptedMessages[Math.floor(Math.random() * acceptedMessages.length)];\n        return <p className=\"guess__message\">{msg}</p>;\n      }\n    }\n    \n    if (this.props.message.code) {\n      switch(this.props.message.code) {\n        case 1:\n          msg = <React.Fragment>\n            Город <span className=\"guess__accent\">{this.props.message.value}</span> уже был сыгран в этом матче.\n          </React.Fragment>\n          break;\n        case 2:\n          msg = <React.Fragment>\n            Не знаю города <span className=\"guess__accent\">{this.props.message.value}</span>\n          </React.Fragment>\n          break;\n        case 3:\n          let lastLetters = [];\n          if (this.props.message.value === 'И' || this.props.message.value === 'Й') {\n            lastLetters = ['И', 'Й'];\n          }\n          if (this.props.message.value === 'Ш' || this.props.message.value === 'Щ') {\n            lastLetters = ['Ш', 'Щ'];\n          }\n          \n          if (!lastLetters.length) {\n            msg = <React.Fragment>\n              Нужно сыграть город на <span className=\"guess__accent\">{this.props.message.value}</span>\n            </React.Fragment>\n          } else {\n            \n            msg = <React.Fragment>\n              Нужно сыграть город на <span className=\"guess__accent\">{lastLetters[0]}</span> или <span className=\"guess__accent\">{lastLetters[1]}</span>\n            </React.Fragment>\n          }\n          break;\n        default:\n          msg = \"\";\n      }\n      \n      messageElement = <p className=\"guess__message\">{msg}</p>;\n      return messageElement;\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"guess__msg-wrapper\" ref={this.msgRef}>\n        {this.renderMsg()}\n      </div>\n    );\n  }\n}\n\nexport default Message;","export const citiesData = require('./cities-ru.json');\nexport const cityAliases = require('./cityAliases-ru.json');\n\nexport function initialDataPrepare(data) {\n  const cities = [];\n  const bigCities = [];\n  \n  function helper(arr, cityObj) {\n    const firstLetter = cityObj.city[0].toUpperCase();      \n    if (!arr[firstLetter]) {\n      arr[firstLetter] = [];\n      arr[firstLetter].push(cityObj);\n    } else {\n      arr[firstLetter].push(cityObj);\n    }\n  }\n  \n  data.forEach(city => {\n    if (city.size !== 1 || city.interest) {\n      helper(bigCities, city);\n    } else {\n      helper(cities, city);\n    }\n  })\n  return { bigCities, cities };\n}","import { citiesData, initialDataPrepare, cityAliases} from './database';\n\nconst citiesRU = initialDataPrepare(citiesData);\n// size: 0 — Capital\n// size: 1 - Small or medium city\n// size: 2 — Big city (> 1m population)\nconst LETTERS = [...Object.keys(citiesRU.bigCities)];\nconst FORBIDDEN_LETTERS = ['ь', 'ъ', 'ы', 'ф'];\n\nclass Computer {\n  constructor(lang) {\n    this.data = initialDataPrepare(citiesData);\n    this.alreadyPlayed = new Set();\n    this.recentTurn = {\n      city: {},\n      lastLetter: ''\n    }\n  }\n  \n  answer(firstLetter) {\n    const bigCities = this.data.bigCities;\n    const cities = this.data.cities;\n    let data = [];\n    let index = null;\n    \n    if (!firstLetter) {\n      let randomLetter = LETTERS[this.getRandomIndex(LETTERS)];\n      // Check if cities are still available on random letter\n      while (!cities[randomLetter].length || !bigCities[randomLetter].length) {\n        randomLetter = LETTERS[this.getRandomIndex(LETTERS)];\n      }\n      firstLetter = randomLetter;\n    }\n    \n    if (bigCities[firstLetter].length) {\n      index = this.getRandomIndex(bigCities[firstLetter]);\n      data = bigCities[firstLetter];\n    } else if (cities[firstLetter].length) {\n      index = this.getRandomIndex(cities[firstLetter]);\n      data = cities[firstLetter];\n    } else {\n      return false;\n    }\n    \n    const answer = data[index];\n    this.recentTurn.city = answer;\n    this.defineLastLetter(answer.city);\n    this.deleteCity(answer);\n    return answer;\n  }\n  \n  checkUserInput(guess) {\n    const firstLetter = guess[0].toUpperCase();\n    const isAlias = this.checkAlias(guess);\n    guess = isAlias ? isAlias : guess;\n    \n    if (this.checkMatch(this.data.bigCities[firstLetter], guess)) return true;\n    if (this.checkMatch(this.data.cities[firstLetter], guess)) return true;\n    return false;\n  }\n  \n  checkMatch(dataOnLetter, guess) {\n    for (let cityObj of dataOnLetter) {\n      if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n        this.recentTurn = {\n          city: cityObj,\n          lastLetter: this.defineLastLetter(cityObj.city)\n        }\n        this.deleteCity(cityObj);\n        return true;\n      }\n    }\n  }\n  \n  checkAlias(guess) {\n    for (let city of cityAliases) {\n      if (city.alias.toLowerCase() === guess.toLowerCase()) {\n        return city.original;\n      }\n    }\n    return null;\n  }\n  \n  deleteCity(cityData) {\n    const city = cityData.city;\n    this.alreadyPlayed.add(city);\n    const firstLetter = city[0].toUpperCase();\n    \n    if (cityData.size === 1 && !cityData.interest.length) {\n      const cities = this.data.cities[firstLetter].filter(cityObj => {\n        return cityObj.city !== city;\n      });\n      this.data.cities[firstLetter] = cities;\n    } else {\n      const bigCities = this.data.bigCities[firstLetter].filter(cityObj => {\n        return cityObj.city !== city;\n      });\n      this.data.bigCities[firstLetter] = bigCities;\n    }\n  }\n  \n  defineLastLetter(city) {\n    let index = city.length - 1;\n    let lastLetter = city[index];\n    \n    while (FORBIDDEN_LETTERS.indexOf(lastLetter) !== -1) {\n      index--;\n      lastLetter = city[index];\n    }\n    this.recentTurn.lastLetter = lastLetter.toUpperCase();\n    return lastLetter.toUpperCase();\n  }\n  \n  getRandomIndex(arr) {\n    return Math.floor(Math.random() * (arr.length - 1));\n  }  \n}\n\nexport default Computer;","import React, { Component } from 'react';\nimport UserInput from '../UserInput/UserInput';\nimport Modal from '../Modal/Modal';\nimport Scorebar from '../Scorebar/Scorebar';\nimport TurnsList from '../TurnsList/TurnsList';\nimport Message from '../Message/Message';\nimport Computer from '../../Utils/Computer';\nimport './App.css';\n\nlet comp = new Computer('ru');\nconst gameConfig = {\n  turnLimit: 60,\n  cityValue: {'0': 3, '1': 1, '2': 2}\n}\n\nclass App extends Component {\n  state = {\n    gameStarted: false,\n    gameEnded: false,\n    turn: {\n      activePlayer: 'computer',\n      firstLetter: ''\n    },\n    playedCities: [],\n    turnNumber: 0,\n    timeLeft: gameConfig.turnLimit,\n    score: {\n      human: 0,\n      computer: 0\n    },\n    turnScore: null,\n    timer: null,\n    message: {\n      code: 0,\n      value: null,\n      id: 0\n    },\n    isAccepted: false\n  }\n\n  async makeTurn(player) {\n    if (player === 'computer') {\n      await this.setState({ turnNumber: this.state.turnNumber + 1 });\n      const answer = comp.answer(this.state.turn.firstLetter);\n      await new Promise((resolve, reject) => {\n        resolve(\n          setTimeout(function() {\n            this.incrementScore('computer', answer.size);\n            this.updateGameState('computer', answer);\n            this.setState({ turnNumber: this.state.turnNumber + 1 });\n            this.setState({ isAccepted: false });\n          }.bind(this), 2000)\n        );\n      });\n    } else if (player === 'human') {\n      this.setState({ isAccepted: true });\n      const recentTurn = comp.recentTurn.city;\n      await this.incrementScore('human', recentTurn.size);\n      await this.updateGameState('human', recentTurn);\n      this.makeTurn('computer');\n    }\n  }\n\n  updateGameState(player, cityObj) {\n    const nextPlayer = player === 'human' ? 'computer' : 'human';\n    cityObj.player = player;\n    cityObj.turnNumber = this.state.turnNumber;\n    cityObj.turnScore = this.state.turnScore;\n    \n    this.markCityAsPlayed(cityObj);\n    this.setState({ turn: {\n      activePlayer: nextPlayer,\n      firstLetter: comp.recentTurn.lastLetter\n      }\n    });    \n    if (nextPlayer === 'human') {\n      this.setState({ message: { \n        code: 3,\n        value: this.state.turn.firstLetter,\n        id: this.state.message.id + 1\n      }});\n      this.runTimer();\n    }\n  }\n  \n  runTimer() {\n    this.setState({ timeLeft: gameConfig.turnLimit });\n    \n    this.timer = setInterval(function() {\n      this.setState({ timeLeft: this.state.timeLeft - 1 });\n      if (this.state.timeLeft <= 0) {\n        clearInterval(this.timer);\n        this.setState({ gameEnded: true});\n        this.setState({ gameStarted: false});\n      }\n    }.bind(this), 1000);\n  }\n  \n  formatGuess(guess) {\n    let options = [];\n    \n    let city = guess.trim();\n    city = city[0].toUpperCase() + city.slice(1);\n    city = city.replace(/\\s+/g, ' ');\n    city = city.replace(/[^а-яА-Я- ]/g, '');\n    options.push(city);\n    \n    if (/ /g.test(city)) {\n      const copy = city;\n      const cityWithDashes = copy.replace(/ /g, '-');\n      const cityWithNoSpaces = copy.replace(/ /g, '');\n      options.push(cityWithDashes);\n      options.push(cityWithNoSpaces);\n    }\n    return options;\n  }\n  \n  markCityAsPlayed(cityObj) {\n    const played = this.state.playedCities.slice();\n    played.push(cityObj);\n    this.setState({ playedCities: played });\n  }\n  \n  incrementScore(player, citySize) {\n    const score = {...this.state.score};\n    let turnScore = NaN;\n  \n    switch(citySize) {\n      case 0: \n        turnScore = gameConfig.cityValue[citySize];\n        score[player] += turnScore;\n        break;\n      case 2:\n        turnScore = gameConfig.cityValue[citySize];\n        score[player] += turnScore;\n        break;\n      default:\n        turnScore = 1;\n        score[player] += turnScore;\n    }\n    this.setState({ turnScore });\n    this.setState({ score });\n  }\n  \n  validateFirstLetter(firstLetter) {\n    if (firstLetter === this.state.turn.firstLetter) return true;\n    \n    if (this.state.turn.firstLetter === 'И' || this.state.turn.firstLetter === 'Й') {\n      if (firstLetter === 'И' || firstLetter === 'Й') {\n        return true;\n      }\n    }\n    \n    if (this.state.turn.firstLetter === 'Ш' || this.state.turn.firstLetter === 'Щ') {\n      if (firstLetter === 'Ш' || firstLetter === 'Щ') {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  onFormSubmit = (guess) => {\n    if (!guess.length) return;\n    this.setState({ message: { code: 0, value: null, id: this.state.message.id }});\n    const cityOptions = this.formatGuess(guess);\n    \n    if (this.state.turn.activePlayer === 'human') {\n        if (this.validateFirstLetter(guess[0].toUpperCase())) {\n          for (let option of cityOptions) {\n            if (comp.alreadyPlayed.has(option)) {\n              this.setState({ message: { \n                code: 1,\n                value: option,\n                id: this.state.message.id + 1\n              }});\n              return;\n            } else if (comp.checkUserInput(option)) {\n              clearInterval(this.timer);\n              this.makeTurn('human');\n              return option;\n            } \n          }\n          this.setState({ message: { \n            code: 2,\n            value: guess,\n            id: this.state.message.id + 1\n          }});\n      } else {\n        this.setState({ message: { \n          code: 3,\n          value: this.state.turn.firstLetter,\n          id: this.state.message.id + 1\n        }});\n      }\n    }\n  }\n  \n  onButtonClick = async () => {\n    comp = new Computer('ru');\n    await this.setState({ gameStarted: true });\n    await this.setState({ gameEnded: false });\n    await this.setState({ playedCities: [] });\n    await this.setState({ turnNumber: 0 });\n    await this.setState({ score: { human: 0, computer: 0 }});\n    await this.setState({ turn: { activePlayer: 'computer', firstLetter: '' }});\n    await this.setState({ message: { code: 0, value: null, id: this.state.message.id }});\n    this.makeTurn('computer');\n  }\n  \n  render() {\n    return (\n      <div className=\"game-wrapper\">\n        <Modal gameStarted={this.state.gameStarted} gameEnded={this.state.gameEnded} score={this.state.score} onButtonClick={this.onButtonClick}/>\n        <Scorebar turn={this.state.turnNumber} score={this.state.score} timeLeft={this.state.timeLeft} gameEnded={this.state.gameEnded}/>\n        <TurnsList turn={this.state.turn} turnNumber={this.state.turnNumber} playedCities={this.state.playedCities} gameStarted={this.state.gameStarted} gameEnded={this.state.gameEnded}/>\n        { !this.state.gameEnded ? <Message message={this.state.message} gameEnded={this.state.gameEnded} isAccepted={this.state.isAccepted}/> : '' }\n        <UserInput firstLetter={this.state.turn.firstLetter} player={this.state.turn.activePlayer}  gameEnded={this.state.gameEnded} onSubmit={this.onFormSubmit}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}