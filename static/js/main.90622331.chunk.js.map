{"version":3,"sources":["Components/UserInput/UserInput.js","Components/Modal/Modal.js","Components/Scorebar/Scorebar.js","Components/Turn/Turn.js","Components/TurnsList/TurnsList.js","Components/Message/Message.js","Utils/database.js","Utils/Computer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["UserInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFormSubmit","event","preventDefault","onSubmit","state","guess","handleChange","e","setState","target","value","inputRef","React","createRef","buttonRef","prevProps","player","gameEnded","current","disabled","focus","firstLetter","blur","react_default","a","createElement","className","type","ref","onChange","Component","Modal","isNewRecord","handleClick","bind","assertThisInitialized","defineRecord","onButtonClick","recordPart","pointsPart","defineWordEnding","score","human","title","description","Fragment","buttonText","matchScore","bestScore","Infinity","localStorage","getItem","Number","setItem","num","gameStarted","concat","getContent","onClick","Scorebar","turn","Math","floor","computer","timeLeft","calcUserTurn","TurnItem","posed","li","enter","rotateY","opacity","delay","transition","y","stiffness","damping","default","duration","exit","Turn","isVisible","loading","timer","_this2","setTimeout","clearInterval","city","react_spinners","margin","sizeUnit","size","color","country","prop","turnScore","pose","renderTurnNumber","turnNumber","renderCity","renderCountry","renderBonus","renderScore","TurnsList","listRef","list","scrollTop","scrollHeight","played","playedCities","lastTurn","length","turns","map","cityObj","Components_Turn_Turn","key","currentTurn","activePlayer","blank","push","console","log","renderTurns","acceptedMessages","Message","isShown","msgRef","message","id","classList","remove","runTimer","add","msg","isAccepted","random","code","lastLetters","renderMsg","citiesData","require","initialDataPrepare","data","cities","bigCities","helper","arr","toUpperCase","forEach","interest","citiesRU","LETTERS","toConsumableArray","keys","FORBIDDEN_LETTERS","Computer","lang","alreadyPlayed","Set","recentTurn","lastLetter","index","randomLetter","getRandomIndex","answer","defineLastLetter","deleteCity","checkMatch","dataOnLetter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","toLowerCase","err","return","cityData","filter","indexOf","comp","gameConfig","turnLimit","cityValue","0","1","2","App","cityOptions","formatGuess","validateFirstLetter","option","has","checkUserInput","makeTurn","_callee","regenerator_default","wrap","_context","prev","stop","Promise","resolve","reject","incrementScore","updateGameState","nextPlayer","markCityAsPlayed","setInterval","options","trim","slice","replace","test","copy","cityWithDashes","cityWithNoSpaces","citySize","_objectSpread","NaN","Components_Modal_Modal","Components_Scorebar_Scorebar","Components_TurnsList_TurnsList","Components_Message_Message","Components_UserInput_UserInput","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","Components_App_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.90622331.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './UserInput.css';\n\nclass UserInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { guess: '' };\n    this.inputRef = React.createRef();\n    this.buttonRef = React.createRef();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (this.props.player === 'human' && !this.props.gameEnded) {\n      if (prevProps.player !== this.props.player) {\n        this.inputRef.current.disabled = false;\n        this.buttonRef.current.disabled = false;\n        if (!this.props.gameEnded) this.inputRef.current.focus();\n        this.setState({ guess: this.props.firstLetter });\n      }\n    } else {\n      this.inputRef.current.disabled = true;\n      this.buttonRef.current.disabled = true;\n    }\n    \n    if (prevProps.gameEnded !== this.props.gameEnded && this.props.gameEnded) {\n      this.inputRef.current.blur();\n      this.setState({ guess: '' });\n      this.inputRef.current.disabled = true;\n      this.buttonRef.current.disabled = true;\n    }    \n  }\n  \n  onFormSubmit = (event) => {\n    event.preventDefault();\n    this.props.onSubmit(this.state.guess);\n    // e.stopPropagation();\n    // window.scrollTo(0,0);\n  }\n  \n  handleChange = (e) => {\n    this.setState({ guess: e.target.value });\n  }\n  \n  render() {\n    return (\n      <div className=\"guess\">\n        <form className=\"guess__form\" onSubmit={this.onFormSubmit}>\n          <input className=\"guess__input\" type=\"text\" ref={this.inputRef} value={this.state.guess} \n          onChange={this.handleChange} />\n          <button className=\"guess__button\" type=\"submit\" ref={this.buttonRef}></button>\n          \n        </form>\n      </div>\n    );\n  }\n}\n\nexport default UserInput;","import React, { Component } from 'react';\nimport './Modal.css';\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isNewRecord: false };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.gameEnded !== this.props.gameEnded && this.props.gameEnded) {\n      if (this.defineRecord()) this.setState({ isNewRecord: true });\n    }\n  }\n\n  handleClick() {\n    this.props.onButtonClick();\n    this.setState({ isNewRecord: false });\n  }\n  \n  getContent() {\n    if (this.props.gameEnded) {\n      let recordPart = this.state.isNewRecord ? 'Это, на секундочку, новый рекорд!' : '';\n      let pointsPart = this.defineWordEnding(this.props.score.human);\n\n      return {\n        title: 'Все, приехали!',\n        description: <React.Fragment>Я насчитал <strong>{this.props.score.human}</strong> балл{pointsPart}. {recordPart}<br/>\n        Желтая кнопка ниже приглашает повторить.</React.Fragment>,\n        buttonText: 'Еще разок.'\n      }\n    }\n    \n    return {\n      title: 'Новая игра',\n      description: <React.Fragment>Правила очень простые — называй реально существующие города на последнюю букву города, который сыграл компьютер. <br /><br />\n      <strong>Например</strong>: Москва 👉 Амстердам 👉 Мюнхен <br /><br /> P.S. Кстати, у компьютера выиграть невозможно, поэтому не расстраивайся.</React.Fragment>,\n      buttonText: 'Понятно.'\n    }\n  }\n  \n  defineRecord() {\n    const matchScore = this.props.score.human;\n    let bestScore = -Infinity;\n    \n    if (!localStorage.getItem('bestScore')) {\n      localStorage.setItem('bestScore', matchScore);\n    } else {\n      bestScore = Number(localStorage.getItem('bestScore'));\n      \n      if (matchScore > bestScore) localStorage.setItem('bestScore', matchScore);\n    }\n    return matchScore > bestScore;\n  }\n  \n  defineWordEnding(num) {\n    if (num % 100 >= 11 && num % 100 <= 19) return 'ов';\n    if (num % 10 === 1) return '';\n    if (num % 10 >= 2 && num % 10 <= 4) return 'а';\n    return 'ов';\n  }\n  \n  render() {\n    const gameStarted = !this.props.gameStarted || this.props.gameEnded ? \"modal_show\" : \"\";\n    \n    return (\n      <div className={`modal ${gameStarted}`}>\n        <div className=\"modal-content\">\n          <h2 className=\"modal__title\">{this.getContent().title}</h2>\n          <p className=\"modal__description\">{this.getContent().description}</p>\n          <button className=\"modal__button\" type=\"button\" onClick={this.handleClick}>{this.getContent().buttonText}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport './Scorebar.css';\n\nclass Scorebar extends Component {  \n  \n  calcUserTurn() {\n    if (this.props.turn <= 1) return 0;\n    return Math.floor((this.props.turn) / 2);\n  }\n  \n  render() {\n    return (\n      <div className=\"scorebar-wrapper\">\n        <div className=\"scorebar\">\n          <div className=\"scorebar__item scorebar__item--score\">\n            <span className=\"scorebar__value scorebar__value--score scorebar__value--human\">{this.props.score.human}</span>\n            <span className=\"scorebar__value scorebar__value--score scorebar__value--computer\">{this.props.score.computer}</span>\n          </div>\n          <div className=\"scorebar__item\">\n            <span className=\"scorebar__value\">{this.props.timeLeft}</span>\n            <span className=\"scorebar__caption\">Время на ход</span>\n          </div>\n          <div className=\"scorebar__item\">\n            <span className=\"scorebar__value\">{this.calcUserTurn()}</span>\n            <span className=\"scorebar__caption\">Номер рейса</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Scorebar;","import React, { Component } from 'react';\nimport { PulseLoader } from 'react-spinners';\nimport posed from 'react-pose';\nimport './Turn.css';\n\nconst TurnItem = posed.li({\n  enter: {\n    rotateY: 0,\n    opacity: 1,\n    delay: 0,\n    transition: {\n      y: { type: 'spring', stiffness: 1000, damping: 15 },\n      default: { duration: 500 }\n    }\n  },\n  exit: {\n    rotateY: -180,\n    opacity: 0,\n    transition: { duration: 500 }\n  }\n});\n\nclass Turn extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: false,\n      loading: true\n    }\n    this.timer = null;\n  }\n  \n  componentDidMount() {\n    this.timer = setTimeout(() => {\n      this.setState({ isVisible: true });\n    }, 200);\n  }\n  \n  componentWillUnmount() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n  \n  renderCity() {\n    if (!this.props.city) {\n      return (\n        <div className=\"turns__spinner-wrapper\">\n          { this.props.firstLetter ? <span className=\"turns__first-letter\">{this.props.firstLetter}</span> : '' }\n          <span className=\"turns__spinner\">\n            <PulseLoader\n            margin={\"3px\"}\n            sizeUnit={\"4px\"}\n            size={0}\n            color={'#FD8A2E'}\n            loading={this.state.loading}\n            />\n          </span>\n        </div>\n      )\n    } else {\n      return this.props.city;\n    }\n  }\n  \n  renderCountry() {\n    if (this.props.city) {\n      return this.props.country;\n    }\n  }\n  \n  renderTurnNumber(prop) {\n    if (prop <= 1) {\n      return 1;\n    } else {\n      return prop;\n    }\n  }\n  \n  renderBonus() {\n    switch(this.props.size) {\n      case 0: \n        return '· Столица (+2)';\n      case 2:\n        return '· Мегаполис (+1)';\n      default: \n        return '';\n    }\n  }\n  \n  renderScore() {\n    if (this.props.turnScore) {\n      return (\n        <div className=\"turns__score\">\n          {this.props.turnScore}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    const { isVisible } = this.state;\n    \n    return (\n      <TurnItem className=\"turns__item\" pose={isVisible ? 'enter' : 'exit'}>\n      \n        <div className=\"turns__city-wrapper\">\n          <span className=\"turns__number\">\n            {this.renderTurnNumber(this.props.turnNumber)}\n          </span>\n          <span className=\"turns__city\">\n            {this.renderCity()}\n          </span>\n          <span className=\"turns__country\">\n            {this.renderCountry()}\n          </span>\n          <span className=\"turns__bonus\">\n            {this.renderBonus()}\n          </span>\n        </div>\n        <div className={ `turns__player turns__player--${this.props.player}` }>\n        </div>\n        {this.renderScore()}\n      \n      </TurnItem>\n    )\n  }\n}\n\nexport default Turn;","import React, { Component } from 'react';\nimport Turn from '../Turn/Turn';\nimport './TurnsList.css';\n\nclass TurnsList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isVisible: false };\n    this.listRef = React.createRef();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.turnNumber !== this.props.turnNumber) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight;\n    }\n  }\n  \n  renderTurns() {  \n    const played = this.props.playedCities;\n    const lastTurn = played.length ? played[played.length - 1].turnNumber + 1 : 1;\n    \n    const turns = this.props.playedCities.map(cityObj => {\n      return <Turn key={cityObj.turnNumber} turnNumber={cityObj.turnNumber} turnScore={cityObj.turnScore} city={cityObj.city} size={cityObj.size} country={cityObj.country} player={cityObj.player} />;\n    });\n    \n    if (this.props.gameStarted && !this.props.gameEnded) {\n      let currentTurn = <Turn key={lastTurn} turnNumber={this.props.turnNumber} firstLetter={this.props.turn.firstLetter} player={this.props.turn.activePlayer} blank={true} />\n      turns.push(currentTurn);\n    }\n    console.log(turns);\n    \n    return turns;\n  }\n  \n  render() {\n    return (\n      <div className=\"turns__container\" ref={this.listRef}>\n        <ul className=\"turns\">\n          {this.renderTurns()}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default TurnsList;","import React, { Component } from 'react';\nimport './Message.css';\n\nconst acceptedMessages = [\n  'Океюшки!',\n  'Красивая у них площадь в центре!',\n  'Очень хорошо!',\n  'Компьютера не обыграешь!',\n  'Кофе у них так себе.',\n  'Вот бы туда сгонять на выходные!'\n]\n\nclass Message extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { timer: null, isShown: false };\n    this.msgRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.message.id !== this.props.message.id) {\n      this.setState({ isShown: true });\n      this.msgRef.current.classList.remove('visually-hidden');\n      this.runTimer(this.props.message.id);\n    }\n  }\n  \n  runTimer(id) {\n    this.timer = setTimeout(function() {\n      this.setState({ isShown: false });\n      this.msgRef.current.classList.add('visually-hidden');\n      if (id !== this.props.message.id) {\n        clearInterval(this.timer);\n        this.setState({ isShown: true });\n        this.msgRef.current.classList.remove('visually-hidden');\n      }\n    }.bind(this), 5000);\n  }\n  \n  renderMsg() {\n    if (this.props.gameEnded) return;\n    let msg, messageElement;\n    \n    if (this.props.isAccepted) {\n      let displayChance = Math.random() * 100;\n      \n      if (displayChance > 66) {\n        msg = acceptedMessages[Math.floor(Math.random() * acceptedMessages.length)];\n        return <p className=\"guess__message\">{msg}</p>;\n      }\n    }\n    \n    if (this.props.message.code) {\n      switch(this.props.message.code) {\n        case 1:\n          msg = <React.Fragment>\n            Город <span className=\"guess__accent\">{this.props.message.value}</span> уже был сыгран в этом матче.\n          </React.Fragment>\n          break;\n        case 2:\n          msg = <React.Fragment>\n            Не знаю города <span className=\"guess__accent\">{this.props.message.value}</span>\n          </React.Fragment>\n          break;\n        case 3:\n          let lastLetters = [];\n          if (this.props.message.value === 'И' || this.props.message.value === 'Й') {\n            lastLetters = ['И', 'Й'];\n          }\n          if (this.props.message.value === 'Ш' || this.props.message.value === 'Щ') {\n            lastLetters = ['Ш', 'Щ'];\n          }\n          \n          if (!lastLetters.length) {\n            msg = <React.Fragment>\n              Нужно сыграть город на <span className=\"guess__accent\">{this.props.message.value}</span>\n            </React.Fragment>\n          } else {\n            \n            msg = <React.Fragment>\n              Нужно сыграть город на <span className=\"guess__accent\">{lastLetters[0]}</span> или <span className=\"guess__accent\">{lastLetters[1]}</span>\n            </React.Fragment>\n          }\n          break;\n        default:\n          msg = \"\";\n      }\n      \n      messageElement = <p className=\"guess__message\">{msg}</p>;\n      return messageElement;\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"guess__msg-wrapper\" ref={this.msgRef}>\n        {this.renderMsg()}\n      </div>\n    );\n  }\n}\n\nexport default Message;","export const citiesData = require('./cities-ru.json');\n\nexport function initialDataPrepare(data) {\n  const cities = [];\n  const bigCities = [];\n  \n  function helper(arr, cityObj) {\n    const firstLetter = cityObj.city[0].toUpperCase();      \n    if (!arr[firstLetter]) {\n      arr[firstLetter] = [];\n      arr[firstLetter].push(cityObj);\n    } else {\n      arr[firstLetter].push(cityObj);\n    }\n  }\n  \n  data.forEach(city => {\n    if (city.size !== 1 || city.interest) {\n      helper(bigCities, city);\n    } else {\n      helper(cities, city);\n    }\n  })\n  return { bigCities, cities };\n}","import { citiesData, initialDataPrepare} from './database';\n\nconst citiesRU = initialDataPrepare(citiesData);\n// size: 0 — Capital\n// size: 1 - Small or medium city\n// size: 2 — Big city (> 1m population)\nconst LETTERS = [...Object.keys(citiesRU.bigCities)];\nconst FORBIDDEN_LETTERS = ['ь', 'ъ', 'ы', 'ф'];\n\nclass Computer {\n  constructor(lang) {\n    this.data = initialDataPrepare(citiesData);\n    this.alreadyPlayed = new Set();\n    this.recentTurn = {\n      city: {},\n      lastLetter: ''\n    }\n  }\n  \n  answer(firstLetter) {\n    const bigCities = this.data.bigCities;\n    const cities = this.data.cities;\n    let data = [];\n    let index = null;\n    \n    if (!firstLetter) {\n      let randomLetter = LETTERS[this.getRandomIndex(LETTERS)];\n      // Check if cities are still available on random letter\n      while (!cities[randomLetter].length || !bigCities[randomLetter].length) {\n        randomLetter = LETTERS[this.getRandomIndex(LETTERS)];\n      }\n      firstLetter = randomLetter;\n    }\n    \n    if (bigCities[firstLetter].length) {\n      index = this.getRandomIndex(bigCities[firstLetter]);\n      data = bigCities[firstLetter];\n    } else if (cities[firstLetter].length) {\n      index = this.getRandomIndex(cities[firstLetter]);\n      data = cities[firstLetter];\n    } else {\n      return false;\n    }\n    \n    const answer = data[index];\n    this.recentTurn.city = answer;\n    this.defineLastLetter(answer.city);\n    this.deleteCity(answer);\n    return answer;\n  }\n  \n  checkUserInput(guess) {\n    const firstLetter = guess[0].toUpperCase();\n    \n    if (this.checkMatch(this.data.bigCities[firstLetter], guess)) return true;\n    if (this.checkMatch(this.data.cities[firstLetter], guess)) return true;\n    return false;\n    \n    // for (let cityObj of this.data.bigCities[firstLetter]) {\n    //   if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n    //     this.recentTurn = {\n    //       city: cityObj,\n    //       lastLetter: this.defineLastLetter(cityObj.city)\n    //     }\n    //     this.deleteCity(cityObj);\n    //     return true;\n    //   }\n    // }\n    // \n    // for (let cityObj of this.data.cities[firstLetter]) {\n    //   if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n    //     this.recentTurn = {\n    //       city: cityObj,\n    //       lastLetter: this.defineLastLetter(cityObj.city)\n    //     }\n    //     this.deleteCity(cityObj);\n    //     return true;\n    //   }\n    // }\n  }\n  \n  checkMatch(dataOnLetter, guess) {\n    for (let cityObj of dataOnLetter) {\n      if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n        this.recentTurn = {\n          city: cityObj,\n          lastLetter: this.defineLastLetter(cityObj.city)\n        }\n        this.deleteCity(cityObj);\n        return true;\n      }\n    }\n  }\n  \n  deleteCity(cityData) {\n    const city = cityData.city;\n    this.alreadyPlayed.add(city);\n    const firstLetter = city[0].toUpperCase();\n    \n    if (cityData.size === 1 && !cityData.interest.length) {\n      const cities = this.data.cities[firstLetter].filter(cityObj => {\n        return cityObj.city !== city;\n      });\n      this.data.cities[firstLetter] = cities;\n    } else {\n      const bigCities = this.data.bigCities[firstLetter].filter(cityObj => {\n        return cityObj.city !== city;\n      });\n      this.data.bigCities[firstLetter] = bigCities;\n    }\n  }\n  \n  defineLastLetter(city) {\n    let index = city.length - 1;\n    let lastLetter = city[index];\n    \n    while (FORBIDDEN_LETTERS.indexOf(lastLetter) !== -1) {\n      index--;\n      lastLetter = city[index];\n    }\n    this.recentTurn.lastLetter = lastLetter.toUpperCase();\n    return lastLetter.toUpperCase();\n  }\n  \n  getRandomIndex(arr) {\n    return Math.floor(Math.random() * (arr.length - 1));\n  }  \n}\n\nexport default Computer;","import React, { Component } from 'react';\nimport UserInput from '../UserInput/UserInput';\nimport Modal from '../Modal/Modal';\nimport Scorebar from '../Scorebar/Scorebar';\nimport TurnsList from '../TurnsList/TurnsList';\nimport Message from '../Message/Message';\nimport Computer from '../../Utils/Computer';\nimport './App.css';\n\nlet comp = new Computer('ru');\nconst gameConfig = {\n  turnLimit: 60,\n  cityValue: {'0': 3, '1': 1, '2': 2}\n}\n\nclass App extends Component {\n  state = {\n    gameStarted: false,\n    gameEnded: false,\n    turn: {\n      activePlayer: 'computer',\n      firstLetter: ''\n    },\n    playedCities: [],\n    turnNumber: 0,\n    timeLeft: gameConfig.turnLimit,\n    score: {\n      human: 0,\n      computer: 0\n    },\n    turnScore: null,\n    timer: null,\n    message: {\n      code: 0,\n      value: null,\n      id: 0\n    },\n    isAccepted: false\n  }\n\n  async makeTurn(player) {\n    if (player === 'computer') {\n      await this.setState({ turnNumber: this.state.turnNumber + 1 });\n      const answer = comp.answer(this.state.turn.firstLetter);\n      await new Promise((resolve, reject) => {\n        resolve(\n          setTimeout(function() {\n            this.incrementScore('computer', answer.size);\n            this.updateGameState('computer', answer);\n            this.setState({ turnNumber: this.state.turnNumber + 1 });\n            this.setState({ isAccepted: false });\n          }.bind(this), 2000)\n        );\n      });\n    } else if (player === 'human') {\n      this.setState({ isAccepted: true });\n      const recentTurn = comp.recentTurn.city;\n      await this.incrementScore('human', recentTurn.size);\n      await this.updateGameState('human', recentTurn);\n      this.makeTurn('computer');\n    }\n  }\n\n  updateGameState(player, cityObj) {\n    const nextPlayer = player === 'human' ? 'computer' : 'human';\n    cityObj.player = player;\n    cityObj.turnNumber = this.state.turnNumber;\n    cityObj.turnScore = this.state.turnScore;\n    \n    this.markCityAsPlayed(cityObj);\n    this.setState({ turn: {\n      activePlayer: nextPlayer,\n      firstLetter: comp.recentTurn.lastLetter\n      }\n    });    \n    if (nextPlayer === 'human') {\n      this.setState({ message: { \n        code: 3,\n        value: this.state.turn.firstLetter,\n        id: this.state.message.id + 1\n      }});\n      this.runTimer();\n    }\n  }\n  \n  runTimer() {\n    this.setState({ timeLeft: gameConfig.turnLimit });\n    \n    this.timer = setInterval(function() {\n      this.setState({ timeLeft: this.state.timeLeft - 1 });\n      if (this.state.timeLeft <= 0) {\n        clearInterval(this.timer);\n        this.setState({ gameEnded: true});\n        this.setState({ gameStarted: false});\n      }\n    }.bind(this), 1000);\n  }\n  \n  formatGuess(guess) {\n    let options = [];\n    \n    let city = guess.trim();\n    city = city[0].toUpperCase() + city.slice(1);\n    city = city.replace(/\\s+/g, ' ');\n    city = city.replace(/[^а-яА-Я- ]/g, '');\n    options.push(city);\n    \n    if (/ /g.test(city)) {\n      const copy = city;\n      const cityWithDashes = copy.replace(/ /g, '-');\n      const cityWithNoSpaces = copy.replace(/ /g, '');\n      options.push(cityWithDashes);\n      options.push(cityWithNoSpaces);\n    }\n    return options;\n  }\n  \n  markCityAsPlayed(cityObj) {\n    const played = this.state.playedCities.slice();\n    played.push(cityObj);\n    this.setState({ playedCities: played });\n  }\n  \n  incrementScore(player, citySize) {\n    const score = {...this.state.score};\n    let turnScore = NaN;\n  \n    switch(citySize) {\n      case 0: \n        turnScore = gameConfig.cityValue[citySize];\n        score[player] += turnScore;\n        break;\n      case 2:\n        turnScore = gameConfig.cityValue[citySize];\n        score[player] += turnScore;\n        break;\n      default:\n        turnScore = 1;\n        score[player] += turnScore;\n    }\n    this.setState({ turnScore });\n    this.setState({ score });\n  }\n  \n  validateFirstLetter(firstLetter) {\n    if (firstLetter === this.state.turn.firstLetter) return true;\n    \n    if (this.state.turn.firstLetter === 'И' || this.state.turn.firstLetter === 'Й') {\n      if (firstLetter === 'И' || firstLetter === 'Й') {\n        return true;\n      }\n    }\n    \n    if (this.state.turn.firstLetter === 'Ш' || this.state.turn.firstLetter === 'Щ') {\n      if (firstLetter === 'Ш' || firstLetter === 'Щ') {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  onFormSubmit = (guess) => {\n    if (!guess.length) return;\n    this.setState({ message: { code: 0, value: null, id: this.state.message.id }});\n    const cityOptions = this.formatGuess(guess);\n    \n    if (this.state.turn.activePlayer === 'human') {\n        if (this.validateFirstLetter(guess[0].toUpperCase())) {\n          for (let option of cityOptions) {\n            if (comp.alreadyPlayed.has(option)) {\n              this.setState({ message: { \n                code: 1,\n                value: option,\n                id: this.state.message.id + 1\n              }});\n              return;\n            } else if (comp.checkUserInput(option)) {\n              clearInterval(this.timer);\n              this.makeTurn('human');\n              return option;\n            } \n          }\n          this.setState({ message: { \n            code: 2,\n            value: guess,\n            id: this.state.message.id + 1\n          }});\n      } else {\n        this.setState({ message: { \n          code: 3,\n          value: this.state.turn.firstLetter,\n          id: this.state.message.id + 1\n        }});\n      }\n    }\n  }\n  \n  onButtonClick = async () => {\n    comp = new Computer('ru');\n    await this.setState({ gameStarted: true });\n    await this.setState({ gameEnded: false });\n    await this.setState({ playedCities: [] });\n    await this.setState({ turnNumber: 0 });\n    await this.setState({ score: { human: 0, computer: 0 }});\n    await this.setState({ turn: { activePlayer: 'computer', firstLetter: '' }});\n    await this.setState({ message: { code: 0, value: null, id: this.state.message.id }});\n    this.makeTurn('computer');\n  }\n  \n  render() {\n    return (\n      <div className=\"game-wrapper\">\n        <Modal gameStarted={this.state.gameStarted} gameEnded={this.state.gameEnded} score={this.state.score} onButtonClick={this.onButtonClick}/>\n        <Scorebar turn={this.state.turnNumber} score={this.state.score} timeLeft={this.state.timeLeft}/>\n        <TurnsList turn={this.state.turn} turnNumber={this.state.turnNumber} playedCities={this.state.playedCities} gameStarted={this.state.gameStarted} gameEnded={this.state.gameEnded}/>\n        { !this.state.gameEnded ? <Message message={this.state.message} gameEnded={this.state.gameEnded} isAccepted={this.state.isAccepted}/> : '' }\n        <UserInput firstLetter={this.state.turn.firstLetter} player={this.state.turn.activePlayer}  gameEnded={this.state.gameEnded} onSubmit={this.onFormSubmit}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}