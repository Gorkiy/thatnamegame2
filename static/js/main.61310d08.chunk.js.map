{"version":3,"sources":["Components/UserInput/UserInput.js","Components/Modal/Modal.js","Components/Scorebar/Scorebar.js","Components/Turn/Turn.js","Components/TurnsList/TurnsList.js","Components/Message/Message.js","Utils/database.js","Utils/Computer.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["UserInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onFormSubmit","event","preventDefault","onSubmit","state","guess","handleChange","e","setState","target","value","inputRef","React","createRef","buttonRef","prevProps","player","firstLetter","current","disabled","gameEnded","focus","blur","react_default","a","createElement","className","type","ref","onChange","Component","Modal","handleClick","bind","assertThisInitialized","onButtonClick","recordPart","defineRecord","pointsPart","defineWordEnding","score","human","title","description","Fragment","buttonText","matchScore","bestScore","Infinity","localStorage","getItem","Number","setItem","num","gameStarted","concat","getContent","onClick","Scorebar","turn","Math","floor","computer","timeLeft","calcUserTurn","Turn","city","country","prop","size","turnScore","renderTurnNumber","turnNumber","renderCity","renderCountry","renderBonus","renderScore","TurnsList","listRef","list","scrollTop","scrollHeight","turns","playedCities","map","cityObj","Components_Turn_Turn","key","currentTurn","activePlayer","blank","push","renderTurns","acceptedMessages","Message","timer","msgRef","isShown","message","id","classList","remove","runTimer","console","log","setTimeout","add","clearInterval","msg","isAccepted","random","length","code","lastLetters","renderMsg","citiesData","require","initialDataPrepare","data","cities","bigCities","helper","arr","toUpperCase","forEach","interest","citiesRU","LETTERS","toConsumableArray","keys","FORBIDDEN_LETTERS","Computer","lang","alreadyPlayed","Set","recentTurn","lastLetter","index","randomLetter","getRandomIndex","answer","defineLastLetter","deleteCity","checkMatch","dataOnLetter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","toLowerCase","err","return","cityData","filter","indexOf","comp","gameConfig","turnLimit","cityValue","0","1","2","App","cityOptions","formatGuess","validateFirstLetter","option","has","checkUserInput","makeTurn","_callee","regenerator_default","wrap","_context","prev","stop","Promise","resolve","reject","incrementScore","updateGameState","_this2","nextPlayer","markCityAsPlayed","setInterval","options","trim","slice","replace","test","copy","cityWithDashes","cityWithNoSpaces","played","citySize","objectSpread","NaN","Components_Modal_Modal","Components_Scorebar_Scorebar","Components_TurnsList_TurnsList","Components_Message_Message","Components_UserInput_UserInput","Boolean","window","location","hostname","match","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61310d08.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './UserInput.css';\n\nclass UserInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { guess: '' };\n    this.inputRef = React.createRef();\n    this.buttonRef = React.createRef();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (this.props.player === 'human') {\n      if (prevProps.player !== this.props.player) {\n        this.setState({ guess: this.props.firstLetter });\n      }\n      this.inputRef.current.disabled = false;\n      this.buttonRef.current.disabled = false;\n      if (!this.props.gameEnded) this.inputRef.current.focus();\n    } else {\n      this.inputRef.current.disabled = true;\n      this.buttonRef.current.disabled = true;\n    }\n    \n    if (prevProps.gameEnded !== this.props.gameEnded && this.props.gameEnded) {\n      this.inputRef.current.blur();\n      this.setState({ guess: '' });\n      this.inputRef.current.disabled = true;\n      this.buttonRef.current.disabled = true;\n    }    \n  }\n  \n  onFormSubmit = (event) => {\n    event.preventDefault();\n    this.props.onSubmit(this.state.guess);\n  }\n  \n  handleChange = (e) => {\n    this.setState({ guess: e.target.value });\n  }\n  \n  render() {\n    return (\n      <div className=\"guess\">\n        <form className=\"guess__form\" onSubmit={this.onFormSubmit}>\n          <input className=\"guess__input\" type=\"text\" ref={this.inputRef} value={this.state.guess} \n          onChange={this.handleChange} />\n          <button className=\"guess__button\" type=\"submit\" ref={this.buttonRef}></button>\n          \n        </form>\n      </div>\n    );\n  }\n}\n\nexport default UserInput;","import React, { Component } from 'react';\nimport './Modal.css';\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.props.onButtonClick();\n  }\n  \n  getContent() {\n    if (this.props.gameEnded) {      \n      let recordPart = this.defineRecord() ? 'Это, на секундочку, новый рекорд!' : '';\n      let pointsPart = this.defineWordEnding(this.props.score.human);\n\n      return {\n        title: 'Все, приехали!',\n        description: <React.Fragment>Я насчитал <strong>{this.props.score.human}</strong> балл{pointsPart}. {recordPart}<br/>\n        Желтая кнопка ниже приглашает повторить.</React.Fragment>,\n        buttonText: 'Еще разок.'\n      }\n    }\n    \n    return {\n      title: 'Новая игра',\n      description: <React.Fragment>Правила очень простые — называй реально существующие города на последнюю букву города, который сыграл компьютер. <br /><br />\n      <strong>Например</strong>: Москва 👉 Амстердам 👉 Мюнхен <br /><br /> P.S. Кстати, у компьютера выиграть невозможно, поэтому не расстраивайся.</React.Fragment>,\n      buttonText: 'Понятно.'\n    }\n  }\n  \n  defineRecord() {\n    const matchScore = this.props.score.human;\n    let bestScore = -Infinity;\n    \n    if (!localStorage.getItem('bestScore')) {\n      localStorage.setItem('bestScore', matchScore);\n    } else {\n      bestScore = Number(localStorage.getItem('bestScore'));\n    }\n    return matchScore > bestScore;\n  }\n  \n  defineWordEnding(num) {\n    if (num % 100 === 11) return 'ов';\n    if (num % 10 === 1) return '';\n    if (num % 10 >= 2 && num % 10 <= 4) return 'а';\n    return 'ов';\n  }\n  \n  render() {\n    const gameStarted = !this.props.gameStarted || this.props.gameEnded ? \"modal_show\" : \"\";\n    \n    return (\n      <div className={`modal ${gameStarted}`}>\n        <div className=\"modal-content\">\n          <h2 className=\"modal__title\">{this.getContent().title}</h2>\n          <p className=\"modal__description\">{this.getContent().description}</p>\n          <button className=\"modal__button\" type=\"button\" onClick={this.handleClick}>{this.getContent().buttonText}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport './Scorebar.css';\n\nclass Scorebar extends Component {  \n  calcUserTurn() {\n    if (this.props.turn <= 1) return 0;\n    return Math.floor((this.props.turn) / 2);\n  }\n  \n  render() {\n    return (\n      <div className=\"scorebar-wrapper\">\n        <div className=\"scorebar\">\n          <div className=\"scorebar__item scorebar__item--score\">\n            <span className=\"scorebar__value scorebar__value--score scorebar__value--human\">{this.props.score.human}</span>\n            <span className=\"scorebar__value scorebar__value--score scorebar__value--computer\">{this.props.score.computer}</span>\n          </div>\n          <div className=\"scorebar__item\">\n            <span className=\"scorebar__value\">{this.props.timeLeft}</span>\n            <span className=\"scorebar__caption\">Время на ход</span>\n          </div>\n          <div className=\"scorebar__item\">\n            <span className=\"scorebar__value\">{this.calcUserTurn()}</span>\n            <span className=\"scorebar__caption\">Номер рейса</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Scorebar;","import React, { Component } from 'react';\nimport './Turn.css';\n\nclass Turn extends Component {  \n  renderCity() {\n    if (!this.props.city) {\n      return this.props.firstLetter + '...' || '...'\n    } else {\n      return this.props.city;\n    }\n  }\n  \n  componentDidUpdate() {\n    // console.log(this.props.turnScore);\n  }\n  \n  renderCountry() {\n    if (this.props.city) {\n      return this.props.country;\n    }\n  }\n  \n  renderTurnNumber(prop) {\n    if (prop <= 1) {\n      return 1;\n    } else {\n      return prop;\n    }\n  }\n  \n  renderBonus() {\n    switch(this.props.size) {\n      case 0: \n        return '· Столица (+2)';\n      case 2:\n        return '· Мегаполис (+1)';\n      default: \n        return '';\n    }\n  }\n  \n  renderScore() {\n    if (this.props.turnScore) {\n      return (\n        <div className=\"turns__score\">\n          {this.props.turnScore}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <li className=\"turns__item\">\n        <div className=\"turns__wrapper\">\n          <span className=\"turns__number\">\n            {this.renderTurnNumber(this.props.turnNumber)}\n          </span>\n          <span className=\"turns__city\">\n            {this.renderCity()}\n          </span>\n          <span className=\"turns__country\">\n            {this.renderCountry()}\n          </span>\n          <span className=\"turns__bonus\">\n            {this.renderBonus()}\n          </span>\n        </div>\n        <div className={ `turns__player turns__player--${this.props.player}` }>\n        </div>\n        {this.renderScore()}\n        \n      </li>\n    )\n  }\n}\n\nexport default Turn;","import React, { Component } from 'react';\nimport Turn from '../Turn/Turn';\nimport './TurnsList.css';\n\nclass TurnsList extends Component {\n  constructor(props) {\n    super(props);\n    this.listRef = React.createRef();\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.turnNumber !== this.props.turnNumber) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight;\n    }\n  }\n  \n  renderTurns() {  \n    const turns = this.props.playedCities.map(cityObj => {\n      return <Turn key={cityObj.turnNumber} turnNumber={cityObj.turnNumber} turnScore={cityObj.turnScore} city={cityObj.city} size={cityObj.size} country={cityObj.country} player={cityObj.player} />;\n    });\n    \n    if (!this.props.gameEnded) {\n      let currentTurn = <Turn key={this.props.turnNumber + 1} turnNumber={this.props.turnNumber} firstLetter={this.props.turn.firstLetter} player={this.props.turn.activePlayer} blank={true} />;\n      turns.push(currentTurn);\n    }\n    \n    return turns;\n  }\n  \n  render() {\n    return (\n      <ul ref={this.listRef} className=\"turns\">\n        {this.renderTurns()}\n      </ul>\n    );\n  }\n}\n\nexport default TurnsList;","import React, { Component } from 'react';\nimport './Message.css';\n\nconst acceptedMessages = [\n  'Океюшки!',\n  'Красивая у них площадь в центре!',\n  'Очень хорошо!',\n  'Компьютера не обыграешь!',\n  'Кофе у них так себе.',\n  'Вот бы туда сгонять на выходные!'\n]\n\nclass Message extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { timer: null };\n    this.msgRef = React.createRef();\n    this.isShown = false;\n  }\n\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.message.id !== this.props.message.id) {\n      this.setState({ isShown: true });\n      this.msgRef.current.classList.remove('visually-hidden');\n      this.runTimer(this.props.message.id);\n    }\n    \n    console.log(prevProps.message.id, this.props.message.id);\n    \n  }\n  \n  runTimer(id) {\n    this.timer = setTimeout(function() {\n      this.setState({ isShown: false });\n      this.msgRef.current.classList.add('visually-hidden');\n      if (id !== this.props.message.id) {\n        clearInterval(this.timer);\n        this.setState({ isShown: true });\n        this.msgRef.current.classList.remove('visually-hidden');\n      }\n    }.bind(this), 5000);\n  }\n  \n  renderMsg() {\n    if (this.props.gameEnded) return;\n    let msg, messageElement;\n    \n    if (this.props.isAccepted) {\n      let displayChance = Math.random() * 100;\n      \n      if (displayChance > 66) {\n        msg = acceptedMessages[Math.floor(Math.random() * acceptedMessages.length)];\n        return <p className=\"guess__message\">{msg}</p>;\n      }\n    }\n    \n    if (this.props.message.code) {\n      switch(this.props.message.code) {\n        case 1:\n          msg = <React.Fragment>\n            Город <span className=\"guess__accent\">{this.props.message.value}</span> уже был сыгран в этом матче.\n          </React.Fragment>\n          break;\n        case 2:\n          msg = <React.Fragment>\n            Не знаю города <span className=\"guess__accent\">{this.props.message.value}</span>\n          </React.Fragment>\n          break;\n        case 3:\n          let lastLetters = [];\n          if (this.props.message.value === 'И' || this.props.message.value === 'Й') {\n            lastLetters = ['И', 'Й'];\n          }\n          if (this.props.message.value === 'Ш' || this.props.message.value === 'Щ') {\n            lastLetters = ['Ш', 'Щ'];\n          }\n          \n          if (!lastLetters.length) {\n            msg = <React.Fragment>\n              Нужно сыграть город на <span className=\"guess__accent\">{this.props.message.value}</span>\n            </React.Fragment>\n          } else {\n            \n            msg = <React.Fragment>\n              Нужно сыграть город на <span className=\"guess__accent\">{lastLetters[0]}</span> или <span className=\"guess__accent\">{lastLetters[1]}</span>\n            </React.Fragment>\n          }\n          break;\n        default:\n          msg = \"\";\n      }\n      \n      messageElement = <p className=\"guess__message\">{msg}</p>;\n      return messageElement;\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"guess__msg-wrapper\" ref={this.msgRef}>\n        {this.renderMsg()}\n      </div>\n    );\n  }\n}\n\nexport default Message;","export const citiesData = require('./cities-ru.json');\n\nexport function initialDataPrepare(data) {\n  const cities = [];\n  const bigCities = [];\n  \n  function helper(arr, cityObj) {\n    const firstLetter = cityObj.city[0].toUpperCase();      \n    if (!arr[firstLetter]) {\n      arr[firstLetter] = [];\n      arr[firstLetter].push(cityObj);\n    } else {\n      arr[firstLetter].push(cityObj);\n    }\n  }\n  \n  data.forEach(city => {\n    if (city.size !== 1 || city.interest) {\n      helper(bigCities, city);\n    } else {\n      helper(cities, city);\n    }\n  })\n  return { bigCities, cities };\n}","import { citiesData, initialDataPrepare} from './database';\n\nconst citiesRU = initialDataPrepare(citiesData);\n// size: 0 — Capital\n// size: 1 - Small or medium city\n// size: 2 — Big city (> 1m population)\nconst LETTERS = [...Object.keys(citiesRU.bigCities)];\nconst FORBIDDEN_LETTERS = ['ь', 'ъ', 'ы', 'ф'];\n\nclass Computer {\n  constructor(lang) {\n    this.data = initialDataPrepare(citiesData);\n    this.alreadyPlayed = new Set();\n    this.recentTurn = {\n      city: {},\n      lastLetter: ''\n    }\n  }\n  \n  answer(firstLetter) {\n    const bigCities = this.data.bigCities;\n    const cities = this.data.cities;\n    let data = [];\n    let index = null;\n    \n    if (!firstLetter) {\n      let randomLetter = LETTERS[this.getRandomIndex(LETTERS)];\n      // Check if cities are still available on random letter\n      while (!cities[randomLetter].length || !bigCities[randomLetter].length) {\n        randomLetter = LETTERS[this.getRandomIndex(LETTERS)];\n      }\n      firstLetter = randomLetter;\n    }\n    \n    if (bigCities[firstLetter].length) {\n      index = this.getRandomIndex(bigCities[firstLetter]);\n      data = bigCities[firstLetter];\n    } else if (cities[firstLetter].length) {\n      index = this.getRandomIndex(cities[firstLetter]);\n      data = cities[firstLetter];\n    } else {\n      return false;\n    }\n    \n    const answer = data[index];\n    this.recentTurn.city = answer;\n    this.defineLastLetter(answer.city);\n    this.deleteCity(answer);\n    return answer;\n  }\n  \n  checkUserInput(guess) {\n    const firstLetter = guess[0].toUpperCase();\n    \n    if (this.checkMatch(this.data.bigCities[firstLetter], guess)) return true;\n    if (this.checkMatch(this.data.cities[firstLetter], guess)) return true;\n    return false;\n    \n    // for (let cityObj of this.data.bigCities[firstLetter]) {\n    //   if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n    //     this.recentTurn = {\n    //       city: cityObj,\n    //       lastLetter: this.defineLastLetter(cityObj.city)\n    //     }\n    //     this.deleteCity(cityObj);\n    //     return true;\n    //   }\n    // }\n    // \n    // for (let cityObj of this.data.cities[firstLetter]) {\n    //   if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n    //     this.recentTurn = {\n    //       city: cityObj,\n    //       lastLetter: this.defineLastLetter(cityObj.city)\n    //     }\n    //     this.deleteCity(cityObj);\n    //     return true;\n    //   }\n    // }\n  }\n  \n  checkMatch(dataOnLetter, guess) {\n    for (let cityObj of dataOnLetter) {\n      if (cityObj.city.toLowerCase() === guess.toLowerCase()) {\n        this.recentTurn = {\n          city: cityObj,\n          lastLetter: this.defineLastLetter(cityObj.city)\n        }\n        this.deleteCity(cityObj);\n        return true;\n      }\n    }\n  }\n  \n  deleteCity(cityData) {\n    const city = cityData.city;\n    this.alreadyPlayed.add(city);\n    const firstLetter = city[0].toUpperCase();\n    \n    if (cityData.size === 1 && !cityData.interest.length) {\n      const cities = this.data.cities[firstLetter].filter(cityObj => {\n        return cityObj.city !== city;\n      });\n      this.data.cities[firstLetter] = cities;\n    } else {\n      const bigCities = this.data.bigCities[firstLetter].filter(cityObj => {\n        return cityObj.city !== city;\n      });\n      this.data.bigCities[firstLetter] = bigCities;\n    }\n  }\n  \n  defineLastLetter(city) {\n    let index = city.length - 1;\n    let lastLetter = city[index];\n    \n    while (FORBIDDEN_LETTERS.indexOf(lastLetter) !== -1) {\n      index--;\n      lastLetter = city[index];\n    }\n    this.recentTurn.lastLetter = lastLetter.toUpperCase();\n    return lastLetter.toUpperCase();\n  }\n  \n  getRandomIndex(arr) {\n    return Math.floor(Math.random() * (arr.length - 1));\n  }  \n}\n\nexport default Computer;","import React, { Component } from 'react';\nimport UserInput from '../UserInput/UserInput';\nimport Modal from '../Modal/Modal';\nimport Scorebar from '../Scorebar/Scorebar';\nimport TurnsList from '../TurnsList/TurnsList';\nimport Message from '../Message/Message';\nimport Computer from '../../Utils/Computer';\nimport './App.css';\n\nlet comp = new Computer('ru');\nconst gameConfig = {\n  turnLimit: 60,\n  cityValue: {'0': 3, '1': 1, '2': 2}\n}\n\nclass App extends Component {\n  state = {\n    gameStarted: false,\n    gameEnded: false,\n    turn: {\n      activePlayer: 'computer',\n      firstLetter: ''\n    },\n    playedCities: [],\n    turnNumber: 0,\n    timeLeft: gameConfig.turnLimit,\n    score: {\n      human: 0,\n      computer: 0\n    },\n    turnScore: null,\n    timer: null,\n    message: {\n      code: 0,\n      value: null,\n      id: 0\n    },\n    isAccepted: false\n  }\n\n  async makeTurn(player) {\n    if (player === 'computer') {\n      await this.setState({ turnNumber: this.state.turnNumber + 1 });\n      const answer = comp.answer(this.state.turn.firstLetter);\n      await new Promise((resolve, reject) => {\n        resolve(\n          setTimeout(function() {\n            this.incrementScore('computer', answer.size);\n            this.updateGameState('computer', answer);\n            this.setState({ turnNumber: this.state.turnNumber + 1 });\n            this.setState({ isAccepted: false });\n          }.bind(this), 2000)\n        );\n      });\n    } else if (player === 'human') {\n      this.setState({ isAccepted: true });\n      const recentTurn = comp.recentTurn.city;\n      await this.incrementScore('human', recentTurn.size);\n      await this.updateGameState('human', recentTurn);\n      this.makeTurn('computer');\n    }\n  }\n\n  updateGameState(player, cityObj) {\n    const nextPlayer = player === 'human' ? 'computer' : 'human';\n    cityObj.player = player;\n    cityObj.turnNumber = this.state.turnNumber;\n    cityObj.turnScore = this.state.turnScore;\n    \n    this.markCityAsPlayed(cityObj);\n    this.setState({ turn: {\n      activePlayer: nextPlayer,\n      firstLetter: comp.recentTurn.lastLetter\n      }\n    });    \n    if (nextPlayer === 'human') {\n      this.setState({ message: { \n        code: 3,\n        value: this.state.turn.firstLetter,\n        id: this.state.message.id + 1\n      }});\n      this.runTimer();\n    }\n  }\n  \n  runTimer() {\n    this.setState({ timeLeft: gameConfig.turnLimit });\n    \n    this.timer = setInterval(function() {\n      this.setState({ timeLeft: this.state.timeLeft - 1 });\n      if (this.state.timeLeft <= 0) {\n        clearInterval(this.timer);\n        this.setState({ gameEnded: true});\n      }\n    }.bind(this), 1000);\n  }\n  \n  formatGuess(guess) {\n    let options = [];\n    \n    let city = guess.trim();\n    city = city[0].toUpperCase() + city.slice(1);\n    city = city.replace(/\\s+/g, ' ');\n    city = city.replace(/[^а-яА-Я- ]/g, '');\n    options.push(city);\n    \n    if (/ /g.test(city)) {\n      const copy = city;\n      const cityWithDashes = copy.replace(/ /g, '-');\n      const cityWithNoSpaces = copy.replace(/ /g, '');\n      options.push(cityWithDashes);\n      options.push(cityWithNoSpaces);\n    }\n    return options;\n  }\n  \n  markCityAsPlayed(cityObj) {\n    const played = this.state.playedCities.slice();\n    played.push(cityObj);\n    this.setState({ playedCities: played });\n  }\n  \n  incrementScore(player, citySize) {\n    const score = {...this.state.score};\n    let turnScore = NaN;\n  \n    switch(citySize) {\n      case 0: \n        turnScore = gameConfig.cityValue[citySize];\n        score[player] += turnScore;\n        break;\n      case 2:\n        turnScore = gameConfig.cityValue[citySize];\n        score[player] += turnScore;\n        break;\n      default:\n        turnScore = 1;\n        score[player] += turnScore;\n    }\n    this.setState({ turnScore });\n    this.setState({ score });\n  }\n  \n  validateFirstLetter(firstLetter) {\n    if (firstLetter === this.state.turn.firstLetter) return true;\n    \n    if (this.state.turn.firstLetter === 'И' || this.state.turn.firstLetter === 'Й') {\n      if (firstLetter === 'И' || firstLetter === 'Й') {\n        return true;\n      }\n    }\n    \n    if (this.state.turn.firstLetter === 'Ш' || this.state.turn.firstLetter === 'Щ') {\n      if (firstLetter === 'Ш' || firstLetter === 'Щ') {\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  // resetmessage(ms) {\n  //   setTimeout(function() {\n  //     this.setState({ message: { code: 0, value: null, isShown: false }});\n  //   }.bind(this), ms);\n  // }\n  \n  // renderMsg() {\n  //   return <Message message={this.state.message} gameEnded={this.state.gameEnded} isAccepted={this.state.isAccepted}/>\n  // }\n  \n  onFormSubmit = (guess) => {\n    if (!guess.length) return;\n    this.setState({ message: { code: 0, value: null, id: this.state.message.id }});\n    const cityOptions = this.formatGuess(guess);\n    \n    if (this.state.turn.activePlayer === 'human') {\n        if (this.validateFirstLetter(guess[0].toUpperCase())) {\n          for (let option of cityOptions) {\n            if (comp.alreadyPlayed.has(option)) {\n              this.setState({ message: { \n                code: 1,\n                value: option,\n                id: this.state.message.id + 1\n              }});\n              return;\n            } else if (comp.checkUserInput(option)) {\n              clearInterval(this.timer);\n              this.makeTurn('human');\n              return option;\n            } \n          }\n          this.setState({ message: { \n            code: 2,\n            value: guess,\n            id: this.state.message.id + 1\n          }});\n      } else {\n        this.setState({ message: { \n          code: 3,\n          value: this.state.turn.firstLetter,\n          id: this.state.message.id + 1\n        }});\n      }\n    }\n  }\n  \n  onButtonClick = async () => {\n    comp = new Computer('ru');\n    await this.setState({ gameStarted: true });\n    await this.setState({ gameEnded: false });\n    await this.setState({ playedCities: [] });\n    await this.setState({ turnNumber: 0 });\n    await this.setState({ score: { human: 0, computer: 0 }});\n    await this.setState({ turn: { activePlayer: 'computer', firstLetter: '' }});\n    await this.setState({ message: { code: 0, value: null, id: this.state.message.id }});\n    this.makeTurn('computer');\n  }\n  \n  render() {\n    // { this.state.message.code \n    //     ? <Message message={this.state.message} gameEnded={this.state.gameEnded} isAccepted={this.state.isAccepted}/>\n    //     : ''\n    //   }\n    \n    \n    return (\n      <div className=\"game-wrapper\">\n        <Modal gameStarted={this.state.gameStarted} gameEnded={this.state.gameEnded} score={this.state.score} onButtonClick={this.onButtonClick}/>\n        <Scorebar turn={this.state.turnNumber} score={this.state.score} timeLeft={this.state.timeLeft}/>\n        <TurnsList turn={this.state.turn} turnNumber={this.state.turnNumber} playedCities={this.state.playedCities} gameEnded={this.state.gameEnded}/>\n        <Message message={this.state.message} gameEnded={this.state.gameEnded} isAccepted={this.state.isAccepted}/>\n        <UserInput firstLetter={this.state.turn.firstLetter} player={this.state.turn.activePlayer}  gameEnded={this.state.gameEnded} onSubmit={this.onFormSubmit}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}